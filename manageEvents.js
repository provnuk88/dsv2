const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const Event = require('../../database/models/Event');
const Registration = require('../../database/models/Registration');
const User = require('../../database/models/User');
const logger = require('../../utils/logger');
const commandPermissions = require('../../utils/commandPermissions');
const waitlistManager = require('../../utils/waitlistManager');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('manageevents')
        .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏')
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('view')
                .setDescription('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
                .addStringOption(option =>
                    option.setName('id')
                        .setDescription('ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('edit')
                .setDescription('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
                .addStringOption(option =>
                    option.setName('id')
                        .setDescription('ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('cancel')
                .setDescription('–û—Ç–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
                .addStringOption(option =>
                    option.setName('id')
                        .setDescription('ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('participants')
                .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
                .addStringOption(option =>
                    option.setName('id')
                        .setDescription('ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
                        .setRequired(true))),
    
    async execute(interaction) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (!commandPermissions.hasAdminPermission(interaction.member)) {
                return interaction.reply({
                    content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.',
                    ephemeral: true
                });
            }

            const subcommand = interaction.options.getSubcommand();
            
            switch (subcommand) {
                case 'list':
                    await this.listEvents(interaction);
                    break;
                case 'view':
                    await this.viewEvent(interaction);
                    break;
                case 'edit':
                    await this.editEvent(interaction);
                    break;
                case 'cancel':
                    await this.cancelEvent(interaction);
                    break;
                case 'participants':
                    await this.manageParticipants(interaction);
                    break;
                default:
                    await interaction.reply({
                        content: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞.',
                        ephemeral: true
                    });
            }
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã manageevents: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    async listEvents(interaction) {
        try {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ
            const events = await Event.find({}).sort({ dateTime: 1 });
            
            if (events.length === 0) {
                return interaction.reply({
                    content: 'üìÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.',
                    ephemeral: true
                });
            }
            
            // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ —Å—Ç–∞—Ç—É—Å—É
            const activeEvents = events.filter(event => event.status === 'active');
            const completedEvents = events.filter(event => event.status === 'completed');
            const cancelledEvents = events.filter(event => event.status === 'cancelled');
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            const activeEmbed = new EmbedBuilder()
                .setColor(0x00FF00)
                .setTitle('–ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
                .setDescription(activeEvents.length > 0 ? '–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:' : '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')
                .setFooter({ text: 'Synergy Guild Bot' })
                .setTimestamp();
            
            if (activeEvents.length > 0) {
                activeEvents.forEach(event => {
                    activeEmbed.addFields({
                        name: `${event.title} (ID: ${event._id})`,
                        value: `üìÖ ${new Date(event.dateTime).toLocaleString('ru-RU')}\nüë• ${event.participants.length}/${event.maxParticipants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\nüìç ${event.location}`
                    });
                });
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            const completedEmbed = new EmbedBuilder()
                .setColor(0x808080)
                .setTitle('–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
                .setDescription(completedEvents.length > 0 ? '–°–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:' : '–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')
                .setFooter({ text: 'Synergy Guild Bot' })
                .setTimestamp();
            
            if (completedEvents.length > 0) {
                completedEvents.slice(0, 5).forEach(event => {
                    completedEmbed.addFields({
                        name: `${event.title} (ID: ${event._id})`,
                        value: `üìÖ ${new Date(event.dateTime).toLocaleString('ru-RU')}\nüë• ${event.participants.length}/${event.maxParticipants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\nüìç ${event.location}`
                    });
                });
                
                if (completedEvents.length > 5) {
                    completedEmbed.addFields({
                        name: '–ò –µ—â–µ...',
                        value: `–ï—â–µ ${completedEvents.length - 5} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π`
                    });
                }
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            const cancelledEmbed = new EmbedBuilder()
                .setColor(0xFF0000)
                .setTitle('–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
                .setDescription(cancelledEvents.length > 0 ? '–°–ø–∏—Å–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:' : '–ù–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')
                .setFooter({ text: 'Synergy Guild Bot' })
                .setTimestamp();
            
            if (cancelledEvents.length > 0) {
                cancelledEvents.slice(0, 5).forEach(event => {
                    cancelledEmbed.addFields({
                        name: `${event.title} (ID: ${event._id})`,
                        value: `üìÖ ${new Date(event.dateTime).toLocaleString('ru-RU')}\nüë• ${event.participants.length}/${event.maxParticipants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\nüìç ${event.location}`
                    });
                });
                
                if (cancelledEvents.length > 5) {
                    cancelledEmbed.addFields({
                        name: '–ò –µ—â–µ...',
                        value: `–ï—â–µ ${cancelledEvents.length - 5} –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π`
                    });
                }
            }
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —ç–º–±–µ–¥–æ–≤
            await interaction.reply({
                embeds: [activeEmbed, completedEmbed, cancelledEmbed],
                ephemeral: true
            });
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },

    // –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    async viewEvent(interaction) {
        try {
            const eventId = interaction.options.getString('id');
            
            // –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const event = await Event.findById(eventId);
            
            if (!event) {
                return interaction.reply({
                    content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                    ephemeral: true
                });
            }
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
            const participantIds = event.participants;
            const participants = await User.find({ discordId: { $in: participantIds } });
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
            const waitlistIds = event.waitlist || [];
            const waitlistUsers = await User.find({ discordId: { $in: waitlistIds } });
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
            const eventEmbed = new EmbedBuilder()
                .setColor(getEventStatusColor(event.status))
                .setTitle(event.title)
                .setDescription(event.description)
                .addFields(
                    { name: '–°—Ç–∞—Ç—É—Å', value: getEventStatusText(event.status), inline: true },
                    { name: '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è', value: event.location, inline: true },
                    { name: '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', value: new Date(event.dateTime).toLocaleString('ru-RU'), inline: true },
                    { name: '–£—á–∞—Å—Ç–Ω–∏–∫–∏', value: `${event.participants.length}/${event.maxParticipants}`, inline: true },
                    { name: '–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è', value: `${waitlistIds.length} —á–µ–ª–æ–≤–µ–∫`, inline: true },
                    { name: '–°–æ–∑–¥–∞–Ω–æ', value: `<@${event.createdBy}> ${new Date(event.createdAt).toLocaleString('ru-RU')}`, inline: true }
                )
                .setFooter({ text: `ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${event._id}` })
                .setTimestamp();
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (participants.length > 0) {
                const participantsList = participants.map((user, index) => 
                    `${index + 1}. <@${user.discordId}> (${user.nickname || '–ë–µ–∑ –Ω–∏–∫–Ω–µ–π–º–∞'}, ${user.telegram || '–ë–µ–∑ Telegram'})`
                ).join('\n');
                
                eventEmbed.addFields({ name: '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', value: participantsList });
            }
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (waitlistUsers.length > 0) {
                const waitlistList = waitlistUsers.map((user, index) => 
                    `${index + 1}. <@${user.discordId}> (${user.nickname || '–ë–µ–∑ –Ω–∏–∫–Ω–µ–π–º–∞'}, ${user.telegram || '–ë–µ–∑ Telegram'})`
                ).join('\n');
                
                eventEmbed.addFields({ name: '–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è', value: waitlistList });
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º
            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`edit_event_${event._id}`)
                        .setLabel('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId(`manage_participants_${event._id}`)
                        .setLabel('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId(`cancel_event_${event._id}`)
                        .setLabel('–û—Ç–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
                        .setStyle(ButtonStyle.Danger)
                );
            
            await interaction.reply({
                embeds: [eventEmbed],
                components: [row],
                ephemeral: true
            });
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    async editEvent(interaction) {
        try {
            const eventId = interaction.options.getString('id');
            
            // –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const event = await Event.findById(eventId);
            
            if (!event) {
                return interaction.reply({
                    content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                    ephemeral: true
                });
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            const modal = createEventEditModal(event);
            await interaction.showModal(modal);
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },

    // –û—Ç–º–µ–Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    async cancelEvent(interaction) {
        try {
            const eventId = interaction.options.getString('id');
            
            // –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const event = await Event.findById(eventId);
            
            if (!event) {
                return interaction.reply({
                    content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                    ephemeral: true
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ª–∏ —É–∂–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            if (event.status === 'cancelled') {
                return interaction.reply({
                    content: '‚ùå –≠—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
                    ephemeral: true
                });
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`confirm_cancel_${event._id}`)
                        .setLabel('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É')
                        .setStyle(ButtonStyle.Danger),
                    new ButtonBuilder()
                        .setCustomId('cancel_operation')
                        .setLabel('–û—Ç–º–µ–Ω–∞')
                        .setStyle(ButtonStyle.Secondary)
                );
            
            await interaction.reply({
                content: `‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`,
                components: [row],
                ephemeral: true
            });
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    async manageParticipants(interaction) {
        try {
            const eventId = interaction.options.getString('id');
            
            // –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const event = await Event.findById(eventId);
            
            if (!event) {
                return interaction.reply({
                    content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                    ephemeral: true
                });
            }
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
            const participantIds = event.participants;
            const participants = await User.find({ discordId: { $in: participantIds } });
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
            const waitlistIds = event.waitlist || [];
            const waitlistUsers = await User.find({ discordId: { $in: waitlistIds } });
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
            const eventEmbed = new EmbedBuilder()
                .setColor(getEventStatusColor(event.status))
                .setTitle(`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: ${event.title}`)
                .setDescription(`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "${event.title}"`)
                .addFields(
                    { name: '–°—Ç–∞—Ç—É—Å', value: getEventStatusText(event.status), inline: true },
                    { name: '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', value: new Date(event.dateTime).toLocaleString('ru-RU'), inline: true },
                    { name: '–£—á–∞—Å—Ç–Ω–∏–∫–∏', value: `${event.participants.length}/${event.maxParticipants}`, inline: true }
                )
                .setFooter({ text: `ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${event._id}` })
                .setTimestamp();
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            const rows = [];
            
            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            const mainRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`add_participant_${event._id}`)
                        .setLabel('–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId(`manage_waitlist_${event._id}`)
                        .setLabel('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–º –æ–∂–∏–¥–∞–Ω–∏—è')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId(`back_to_event_${event._id}`)
                        .setLabel('–ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é')
                        .setStyle(ButtonStyle.Secondary)
                );
            
            rows.push(mainRow);
            
            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É, –º–∞–∫—Å–∏–º—É–º 5 —Ä—è–¥–æ–≤)
            if (participants.length > 0) {
                let currentRow = new ActionRowBuilder();
                let buttonCount = 0;
                
                for (let i = 0; i < Math.min(participants.length, 24); i++) {
                    if (buttonCount === 5) {
                        rows.push(currentRow);
                        currentRow = new ActionRowBuilder();
                        buttonCount = 0;
                    }
                    
                    currentRow.addComponents(
                        new ButtonBuilder()
                            .setCustomId(`remove_participant_${event._id}_${participants[i].discordId}`)
                            .setLabel(`–£–¥–∞–ª–∏—Ç—å ${participants[i].nickname || participants[i].discordTag}`)
                            .setStyle(ButtonStyle.Danger)
                    );
                    
                    buttonCount++;
                }
                
                if (buttonCount > 0) {
                    rows.push(currentRow);
                }
            }
            
            await interaction.reply({
                embeds: [eventEmbed],
                components: rows,
                ephemeral: true
            });
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    async handleButton(interaction) {
        try {
            const customId = interaction.customId;
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
            if (customId === 'cancel_operation') {
                return interaction.update({
                    content: '‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
                    components: [],
                    ephemeral: true
                });
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            if (customId.startsWith('edit_event_')) {
                const eventId = customId.replace('edit_event_', '');
                
                // –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const event = await Event.findById(eventId);
                
                if (!event) {
                    return interaction.reply({
                        content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                        ephemeral: true
                    });
                }
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                const modal = createEventEditModal(event);
                await interaction.showModal(modal);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            else if (customId.startsWith('manage_participants_')) {
                const eventId = customId.replace('manage_participants_', '');
                
                // –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const event = await Event.findById(eventId);
                
                if (!event) {
                    return interaction.reply({
                        content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                        ephemeral: true
                    });
                }
                
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–µ—Ç–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
                await this.manageParticipants({
                    ...interaction,
                    options: {
                        getString: () => eventId
                    }
                });
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            else if (customId.startsWith('cancel_event_')) {
                const eventId = customId.replace('cancel_event_', '');
                
                // –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const event = await Event.findById(eventId);
                
                if (!event) {
                    return interaction.reply({
                        content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                        ephemeral: true
                    });
                }
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
                const row = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`confirm_cancel_${event._id}`)
                            .setLabel('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É')
                            .setStyle(ButtonStyle.Danger),
                        new ButtonBuilder()
                            .setCustomId('cancel_operation')
                            .setLabel('–û—Ç–º–µ–Ω–∞')
                            .setStyle(ButtonStyle.Secondary)
                    );
                
                await interaction.reply({
                    content: `‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`,
                    components: [row],
                    ephemeral: true
                });
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            else if (customId.startsWith('confirm_cancel_')) {
                const eventId = customId.replace('confirm_cancel_', '');
                
                // –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const event = await Event.findById(eventId);
                
                if (!event) {
                    return interaction.update({
                        content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                        components: [],
                        ephemeral: true
                    });
                }
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                event.status = 'cancelled';
                event.updatedAt = new Date();
                await event.save();
                
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                logger.info(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${interaction.user.tag} (${interaction.user.id}) –æ—Ç–º–µ–Ω–∏–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${event.title} (${event._id})`);
                
                await interaction.update({
                    content: `‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.`,
                    components: [],
                    ephemeral: true
                });
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
            else if (customId.startsWith('add_participant_')) {
                const eventId = customId.replace('add_participant_', '');
                
                // –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const event = await Event.findById(eventId);
                
                if (!event) {
                    return interaction.reply({
                        content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                        ephemeral: true
                    });
                }
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
                const modal = new ModalBuilder()
                    .setCustomId(`add_participant_modal_${eventId}`)
                    .setTitle('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
                
                const userIdInput = new TextInputBuilder()
                    .setCustomId('user_id')
                    .setLabel('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord')
                    .setStyle(TextInputStyle.Short)
                    .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord')
                    .setRequired(true);
                
                const firstRow = new ActionRowBuilder().addComponents(userIdInput);
                
                modal.addComponents(firstRow);
                
                await interaction.showModal(modal);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–æ–º –æ–∂–∏–¥–∞–Ω–∏—è
            else if (customId.startsWith('manage_waitlist_')) {
                const eventId = customId.replace('manage_waitlist_', '');
                
                // –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const event = await Event.findById(eventId);
                
                if (!event) {
                    return interaction.reply({
                        content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                        ephemeral: true
                    });
                }
                
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
                const waitlistIds = event.waitlist || [];
                const waitlistUsers = await User.find({ discordId: { $in: waitlistIds } });
                
                // –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
                const waitlistEmbed = new EmbedBuilder()
                    .setColor(0x0099FF)
                    .setTitle(`–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è: ${event.title}`)
                    .setDescription(`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–º –æ–∂–∏–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "${event.title}"`)
                    .addFields(
                        { name: '–£—á–∞—Å—Ç–Ω–∏–∫–∏', value: `${event.participants.length}/${event.maxParticipants}`, inline: true },
                        { name: '–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è', value: `${waitlistIds.length} —á–µ–ª–æ–≤–µ–∫`, inline: true }
                    )
                    .setFooter({ text: `ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${event._id}` })
                    .setTimestamp();
                
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if (waitlistUsers.length > 0) {
                    const waitlistList = waitlistUsers.map((user, index) => 
                        `${index + 1}. <@${user.discordId}> (${user.nickname || '–ë–µ–∑ –Ω–∏–∫–Ω–µ–π–º–∞'}, ${user.telegram || '–ë–µ–∑ Telegram'})`
                    ).join('\n');
                    
                    waitlistEmbed.addFields({ name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è', value: waitlistList });
                } else {
                    waitlistEmbed.addFields({ name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è', value: '–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø—É—Å—Ç' });
                }
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–æ–º –æ–∂–∏–¥–∞–Ω–∏—è
                const rows = [];
                
                // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                const mainRow = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`promote_all_waitlist_${event._id}`)
                            .setLabel('–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ—Ö –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è')
                            .setStyle(ButtonStyle.Primary)
                            .setDisabled(waitlistUsers.length === 0 || event.participants.length >= event.maxParticipants),
                        new ButtonBuilder()
                            .setCustomId(`back_to_participants_${event._id}`)
                            .setLabel('–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏')
                            .setStyle(ButtonStyle.Secondary)
                    );
                
                rows.push(mainRow);
                
                // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
                if (waitlistUsers.length > 0) {
                    let currentRow = new ActionRowBuilder();
                    let buttonCount = 0;
                    
                    for (let i = 0; i < Math.min(waitlistUsers.length, 24); i++) {
                        if (buttonCount === 5) {
                            rows.push(currentRow);
                            currentRow = new ActionRowBuilder();
                            buttonCount = 0;
                        }
                        
                        currentRow.addComponents(
                            new ButtonBuilder()
                                .setCustomId(`promote_waitlist_${event._id}_${waitlistUsers[i].discordId}`)
                                .setLabel(`–î–æ–±–∞–≤–∏—Ç—å ${waitlistUsers[i].nickname || waitlistUsers[i].discordTag}`)
                                .setStyle(ButtonStyle.Success)
                                .setDisabled(event.participants.length >= event.maxParticipants)
                        );
                        
                        buttonCount++;
                    }
                    
                    if (buttonCount > 0) {
                        rows.push(currentRow);
                    }
                }
                
                await interaction.reply({
                    embeds: [waitlistEmbed],
                    components: rows,
                    ephemeral: true
                });
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
            else if (customId.startsWith('back_to_event_')) {
                const eventId = customId.replace('back_to_event_', '');
                
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–µ—Ç–æ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                await this.viewEvent({
                    ...interaction,
                    options: {
                        getString: () => eventId
                    }
                });
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            else if (customId.startsWith('back_to_participants_')) {
                const eventId = customId.replace('back_to_participants_', '');
                
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–µ—Ç–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
                await this.manageParticipants({
                    ...interaction,
                    options: {
                        getString: () => eventId
                    }
                });
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
            else if (customId.startsWith('remove_participant_')) {
                const [, eventId, userId] = customId.split('_').slice(2);
                
                // –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const event = await Event.findById(eventId);
                
                if (!event) {
                    return interaction.reply({
                        content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                        ephemeral: true
                    });
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                if (!event.participants.includes(userId)) {
                    return interaction.reply({
                        content: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.',
                        ephemeral: true
                    });
                }
                
                // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                event.participants = event.participants.filter(id => id !== userId);
                event.updatedAt = new Date();
                await event.save();
                
                // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                await Registration.deleteOne({ eventId: event._id, userId });
                
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
                logger.info(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${interaction.user.tag} (${interaction.user.id}) —É–¥–∞–ª–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${userId} –∏–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${event.title} (${event._id})`);
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ
                if (event.waitlist && event.waitlist.length > 0 && event.participants.length < event.maxParticipants) {
                    await waitlistManager.promoteFromWaitlist(event);
                }
                
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–µ—Ç–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
                await this.manageParticipants({
                    ...interaction,
                    options: {
                        getString: () => eventId
                    }
                });
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
            else if (customId.startsWith('promote_waitlist_')) {
                const [, eventId, userId] = customId.split('_').slice(2);
                
                // –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const event = await Event.findById(eventId);
                
                if (!event) {
                    return interaction.reply({
                        content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                        ephemeral: true
                    });
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
                if (!event.waitlist || !event.waitlist.includes(userId)) {
                    return interaction.reply({
                        content: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.',
                        ephemeral: true
                    });
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
                if (event.participants.length >= event.maxParticipants) {
                    return interaction.reply({
                        content: '‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.',
                        ephemeral: true
                    });
                }
                
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                event.participants.push(userId);
                
                // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
                event.waitlist = event.waitlist.filter(id => id !== userId);
                
                event.updatedAt = new Date();
                await event.save();
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                const registration = new Registration({
                    eventId: event._id,
                    userId,
                    registeredAt: new Date(),
                    status: 'confirmed'
                });
                
                await registration.save();
                
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
                logger.info(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${interaction.user.tag} (${interaction.user.id}) –¥–æ–±–∞–≤–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${userId} –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${event.title} (${event._id})`);
                
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–µ—Ç–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–æ–º –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
                await interaction.reply({
                    content: `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@${userId}> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.`,
                    ephemeral: true
                });
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
                await this.manageParticipants({
                    ...interaction,
                    options: {
                        getString: () => eventId
                    }
                });
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
            else if (customId.startsWith('promote_all_waitlist_')) {
                const eventId = customId.replace('promote_all_waitlist_', '');
                
                // –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const event = await Event.findById(eventId);
                
                if (!event) {
                    return interaction.reply({
                        content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                        ephemeral: true
                    });
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
                if (!event.waitlist || event.waitlist.length === 0) {
                    return interaction.reply({
                        content: '‚ùå –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø—É—Å—Ç.',
                        ephemeral: true
                    });
                }
                
                // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
                const availableSlots = event.maxParticipants - event.participants.length;
                
                if (availableSlots <= 0) {
                    return interaction.reply({
                        content: '‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.',
                        ephemeral: true
                    });
                }
                
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
                const usersToAdd = event.waitlist.slice(0, availableSlots);
                
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                event.participants = [...event.participants, ...usersToAdd];
                
                // –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
                event.waitlist = event.waitlist.filter(id => !usersToAdd.includes(id));
                
                event.updatedAt = new Date();
                await event.save();
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                const registrations = usersToAdd.map(userId => ({
                    eventId: event._id,
                    userId,
                    registeredAt: new Date(),
                    status: 'confirmed'
                }));
                
                await Registration.insertMany(registrations);
                
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
                logger.info(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${interaction.user.tag} (${interaction.user.id}) –¥–æ–±–∞–≤–∏–ª ${usersToAdd.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${event.title} (${event._id})`);
                
                await interaction.reply({
                    content: `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${usersToAdd.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è.`,
                    ephemeral: true
                });
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
                await this.manageParticipants({
                    ...interaction,
                    options: {
                        getString: () => eventId
                    }
                });
            }
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    async handleModal(interaction) {
        try {
            const customId = interaction.customId;
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            if (customId.startsWith('edit_event_modal_')) {
                const eventId = customId.replace('edit_event_modal_', '');
                
                // –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const event = await Event.findById(eventId);
                
                if (!event) {
                    return interaction.reply({
                        content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                        ephemeral: true
                    });
                }
                
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ø–æ–ª–µ–π
                const title = interaction.fields.getTextInputValue('event_title');
                const description = interaction.fields.getTextInputValue('event_description');
                const location = interaction.fields.getTextInputValue('event_location');
                const dateTimeStr = interaction.fields.getTextInputValue('event_datetime');
                const maxParticipants = interaction.fields.getTextInputValue('event_max_participants');
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
                const dateTime = new Date(dateTimeStr);
                
                if (isNaN(dateTime.getTime())) {
                    return interaction.reply({
                        content: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM.',
                        ephemeral: true
                    });
                }
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                const maxParticipantsNum = parseInt(maxParticipants);
                
                if (isNaN(maxParticipantsNum) || maxParticipantsNum <= 0) {
                    return interaction.reply({
                        content: '‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.',
                        ephemeral: true
                    });
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                if (maxParticipantsNum < event.participants.length) {
                    return interaction.reply({
                        content: `‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö (${event.participants.length}).`,
                        ephemeral: true
                    });
                }
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                event.title = title;
                event.description = description;
                event.location = location;
                event.dateTime = dateTime;
                event.maxParticipants = maxParticipantsNum;
                event.updatedAt = new Date();
                
                await event.save();
                
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                logger.info(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${interaction.user.tag} (${interaction.user.id}) –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${event.title} (${event._id})`);
                
                // –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
                const eventEmbed = new EmbedBuilder()
                    .setColor(0x00FF00)
                    .setTitle('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
                    .addFields(
                        { name: '–ù–∞–∑–≤–∞–Ω–∏–µ', value: title, inline: false },
                        { name: '–û–ø–∏—Å–∞–Ω–∏–µ', value: description, inline: false },
                        { name: '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è', value: location, inline: true },
                        { name: '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', value: dateTime.toLocaleString('ru-RU'), inline: true },
                        { name: '–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', value: maxParticipants, inline: true }
                    )
                    .setFooter({ text: `ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${event._id}` })
                    .setTimestamp();
                
                await interaction.reply({
                    content: '‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!',
                    embeds: [eventEmbed],
                    ephemeral: true
                });
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
            else if (customId.startsWith('add_participant_modal_')) {
                const eventId = customId.replace('add_participant_modal_', '');
                
                // –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const event = await Event.findById(eventId);
                
                if (!event) {
                    return interaction.reply({
                        content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                        ephemeral: true
                    });
                }
                
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ø–æ–ª–µ–π
                const userId = interaction.fields.getTextInputValue('user_id');
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                const user = await User.findOne({ discordId: userId });
                
                if (!user) {
                    return interaction.reply({
                        content: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.',
                        ephemeral: true
                    });
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
                if (event.participants.includes(userId)) {
                    return interaction.reply({
                        content: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.',
                        ephemeral: true
                    });
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
                if (event.participants.length >= event.maxParticipants) {
                    return interaction.reply({
                        content: '‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.',
                        ephemeral: true
                    });
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
                if (event.waitlist && event.waitlist.includes(userId)) {
                    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
                    event.waitlist = event.waitlist.filter(id => id !== userId);
                }
                
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                event.participants.push(userId);
                event.updatedAt = new Date();
                await event.save();
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                const registration = new Registration({
                    eventId: event._id,
                    userId,
                    registeredAt: new Date(),
                    status: 'confirmed'
                });
                
                await registration.save();
                
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
                logger.info(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${interaction.user.tag} (${interaction.user.id}) –¥–æ–±–∞–≤–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${userId} –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${event.title} (${event._id})`);
                
                await interaction.reply({
                    content: `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@${userId}> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.`,
                    ephemeral: true
                });
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
                await this.manageParticipants({
                    ...interaction,
                    options: {
                        getString: () => eventId
                    }
                });
            }
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
function createEventEditModal(event) {
    const modal = new ModalBuilder()
        .setCustomId(`edit_event_modal_${event._id}`)
        .setTitle('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
    
    const titleInput = new TextInputBuilder()
        .setCustomId('event_title')
        .setLabel('–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
        .setValue(event.title)
        .setRequired(true);
    
    const descriptionInput = new TextInputBuilder()
        .setCustomId('event_description')
        .setLabel('–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
        .setStyle(TextInputStyle.Paragraph)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
        .setValue(event.description)
        .setRequired(true);
    
    const locationInput = new TextInputBuilder()
        .setCustomId('event_location')
        .setLabel('–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è')
        .setValue(event.location)
        .setRequired(true);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
    const dateTime = new Date(event.dateTime);
    const year = dateTime.getFullYear();
    const month = String(dateTime.getMonth() + 1).padStart(2, '0');
    const day = String(dateTime.getDate()).padStart(2, '0');
    const hours = String(dateTime.getHours()).padStart(2, '0');
    const minutes = String(dateTime.getMinutes()).padStart(2, '0');
    const dateTimeStr = `${year}-${month}-${day} ${hours}:${minutes}`;
    
    const dateTimeInput = new TextInputBuilder()
        .setCustomId('event_datetime')
        .setLabel('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (YYYY-MM-DD HH:MM)')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('–ù–∞–ø—Ä–∏–º–µ—Ä: 2023-12-31 18:00')
        .setValue(dateTimeStr)
        .setRequired(true);
    
    const maxParticipantsInput = new TextInputBuilder()
        .setCustomId('event_max_participants')
        .setLabel('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        .setValue(event.maxParticipants.toString())
        .setRequired(true);
    
    const firstRow = new ActionRowBuilder().addComponents(titleInput);
    const secondRow = new ActionRowBuilder().addComponents(descriptionInput);
    const thirdRow = new ActionRowBuilder().addComponents(locationInput);
    const fourthRow = new ActionRowBuilder().addComponents(dateTimeInput);
    const fifthRow = new ActionRowBuilder().addComponents(maxParticipantsInput);
    
    modal.addComponents(firstRow, secondRow, thirdRow, fourthRow, fifthRow);
    
    return modal;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
function getEventStatusColor(status) {
    switch (status) {
        case 'active':
            return 0x00FF00; // –ó–µ–ª–µ–Ω—ã–π
        case 'completed':
            return 0x808080; // –°–µ—Ä—ã–π
        case 'cancelled':
            return 0xFF0000; // –ö—Ä–∞—Å–Ω—ã–π
        default:
            return 0x0099FF; // –°–∏–Ω–∏–π
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
function getEventStatusText(status) {
    switch (status) {
        case 'active':
            return 'üü¢ –ê–∫—Ç–∏–≤–Ω–æ';
        case 'completed':
            return '‚ö™ –ó–∞–≤–µ—Ä—à–µ–Ω–æ';
        case 'cancelled':
            return 'üî¥ –û—Ç–º–µ–Ω–µ–Ω–æ';
        default:
            return '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
}
