/**
 * Dashboard –∫–æ–º–∞–Ω–¥–∞ - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const User = require('../../database/models/User');
const Event = require('../../database/models/Event');
const Registration = require('../../database/models/Registration');
const AchievementManager = require('../../utils/achievementManager');
const Middleware = require('../../middleware');
const logger = require('../../utils/logger');
const dbCache = require('../../database/cache');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('dashboard')
        .setDescription('–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'),
    
    async execute(interaction) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            await Middleware.rateLimit(interaction);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            const user = await Middleware.requireProfile(interaction);
            
            // –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            await interaction.deferReply({ ephemeral: true });
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
            const dashboardData = await this.getDashboardData(user.discordId);
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            const embed = this.createDashboardEmbed(dashboardData, user);
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            const actionRow = this.createActionButtons(dashboardData);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await interaction.editReply({
                embeds: [embed],
                components: [actionRow],
                ephemeral: true
            });
            
        } catch (error) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ middleware
            const handled = await Middleware.handleError(error, interaction);
            
            if (!handled) {
                logger.error(`Error in dashboard command: ${error.message}`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({ 
                        content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—à–±–æ—Ä–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 
                        ephemeral: true 
                    });
                } else if (interaction.deferred) {
                    await interaction.editReply({ 
                        content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—à–±–æ—Ä–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
                    });
                }
            }
        }
    },
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userId - Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
     */
    async getDashboardData(userId) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        return dbCache.withCache('Dashboard', 'getData', { userId }, async () => {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const activeRegistrations = await Registration.find({ 
                userId: userId,
                status: 'confirmed'
            }).populate('eventId');
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –ª–∏—Å—Ç–∞—Ö –æ–∂–∏–¥–∞–Ω–∏—è
            const waitlistPositions = await Registration.find({
                userId: userId,
                status: 'waitlist'
            }).populate('eventId');
            
            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
            const eventHistory = await Registration.find({
                userId: userId,
                status: 'completed'
            }).populate('eventId').sort({ 'eventId.endDate': -1 }).limit(5);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const achievements = await AchievementManager.getUserAchievements(userId);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            const achievementProgress = await AchievementManager.getUserAchievementProgress(userId);
            
            return {
                activeRegistrations,
                waitlistPositions,
                eventHistory,
                achievements,
                achievementProgress
            };
        }, 300); // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
    },
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–∞—à–±–æ—Ä–¥–∞
     * @param {Object} dashboardData - –î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
     * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {EmbedBuilder} –≠–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    createDashboardEmbed(dashboardData, user) {
        const embed = new EmbedBuilder()
            .setColor('#4CAF50')
            .setTitle('üéÆ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
            .setDescription(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.username}!`)
            .setThumbnail(interaction.user.displayAvatarURL())
            .addFields(
                { name: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', value: this.formatStats(user.stats) }
            );
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
        if (dashboardData.activeRegistrations.length > 0) {
            embed.addFields({
                name: 'üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                value: this.formatEventList(dashboardData.activeRegistrations)
            });
        } else {
            embed.addFields({
                name: 'üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                value: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∞—Ö –æ–∂–∏–¥–∞–Ω–∏—è
        if (dashboardData.waitlistPositions.length > 0) {
            embed.addFields({
                name: '‚è≥ –õ–∏—Å—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è',
                value: this.formatWaitlistPositions(dashboardData.waitlistPositions)
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
        if (dashboardData.achievements.length > 0) {
            embed.addFields({
                name: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                value: this.formatAchievements(dashboardData.achievements)
            });
        } else {
            embed.addFields({
                name: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                value: '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ö!'
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        const nextAchievement = this.getNextAchievement(dashboardData.achievementProgress);
        if (nextAchievement) {
            embed.addFields({
                name: 'üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å',
                value: `${nextAchievement.icon} **${nextAchievement.name}**: ${nextAchievement.progress}% (${nextAchievement.currentValue}/${nextAchievement.requirement})`
            });
        }
        
        return embed;
    },
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    formatStats(stats) {
        return [
            `üìä –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ—Å–µ—â–µ–Ω–æ: **${stats.eventsCompleted}**`,
            `üéüÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: **${stats.eventsJoined}**`,
            `üìù –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ: **${stats.eventsCreated}**`,
            `‚è≥ –õ–∏—Å—Ç–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è: **${stats.waitlistJoins}**`,
            `üìÜ –° –Ω–∞–º–∏ —Å: <t:${Math.floor(new Date(stats.joinedAt).getTime() / 1000)}:D>`
        ].join('\n');
    },
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
     * @param {Array} registrations - –°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
     */
    formatEventList(registrations) {
        if (registrations.length === 0) {
            return '–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π';
        }
        
        return registrations.map(reg => {
            const event = reg.eventId;
            const startTime = Math.floor(new Date(event.startDate).getTime() / 1000);
            return `üìå **${event.title}**\nüìÖ <t:${startTime}:F>\n`;
        }).join('\n');
    },
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ –ª–∏—Å—Ç–∞—Ö –æ–∂–∏–¥–∞–Ω–∏—è
     * @param {Array} waitlistPositions - –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
     */
    formatWaitlistPositions(waitlistPositions) {
        if (waitlistPositions.length === 0) {
            return '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ª–∏—Å—Ç–∞—Ö –æ–∂–∏–¥–∞–Ω–∏—è';
        }
        
        return waitlistPositions.map(reg => {
            const event = reg.eventId;
            const position = reg.waitlistPosition;
            return `‚è≥ **${event.title}** - –ü–æ–∑–∏—Ü–∏—è: ${position}`;
        }).join('\n');
    },
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     * @param {Array} achievements - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
     */
    formatAchievements(achievements) {
        if (achievements.length === 0) {
            return '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π';
        }
        
        return achievements.slice(0, 3).map(ach => {
            return `${ach.icon} **${ach.name}** - ${ach.description}`;
        }).join('\n') + (achievements.length > 3 ? `\n...–∏ –µ—â–µ ${achievements.length - 3}` : '');
    },
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
     * @param {Array} achievementProgress - –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     * @returns {Object|null} –°–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏–ª–∏ null
     */
    getNextAchievement(achievementProgress) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã
        const notAchieved = achievementProgress.filter(a => !a.achieved);
        
        if (notAchieved.length === 0) {
            return null;
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        notAchieved.sort((a, b) => b.progress - a.progress);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        return notAchieved[0];
    },
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
     * @param {Object} dashboardData - –î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
     * @returns {ActionRowBuilder} –°—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
     */
    createActionButtons(dashboardData) {
        const actionRow = new ActionRowBuilder();
        
        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        actionRow.addComponents(
            new ButtonBuilder()
                .setCustomId('dashboard_view_events')
                .setLabel('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
                .setStyle(ButtonStyle.Primary)
                .setEmoji('üìÖ')
        );
        
        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        actionRow.addComponents(
            new ButtonBuilder()
                .setCustomId('dashboard_view_achievements')
                .setLabel('–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
                .setStyle(ButtonStyle.Primary)
                .setEmoji('üèÜ')
        );
        
        // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        actionRow.addComponents(
            new ButtonBuilder()
                .setCustomId('dashboard_edit_profile')
                .setLabel('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('‚úèÔ∏è')
        );
        
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        actionRow.addComponents(
            new ButtonBuilder()
                .setCustomId('dashboard_notification_settings')
                .setLabel('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('‚öôÔ∏è')
        );
        
        return actionRow;
    },
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
     * @param {Object} interaction - –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
     */
    async handleViewEvents(interaction) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            await Middleware.rateLimit(interaction);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            const user = await Middleware.requireProfile(interaction);
            
            // –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            await interaction.deferUpdate();
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const registrations = await Registration.find({ 
                userId: user.discordId 
            }).populate('eventId').sort({ 'eventId.startDate': -1 });
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
            const activeRegs = registrations.filter(reg => 
                reg.status === 'confirmed' && new Date(reg.eventId.endDate) > new Date()
            );
            
            const waitlistRegs = registrations.filter(reg => 
                reg.status === 'waitlist'
            );
            
            const completedRegs = registrations.filter(reg => 
                reg.status === 'completed' || 
                (reg.status === 'confirmed' && new Date(reg.eventId.endDate) <= new Date())
            );
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
            const embed = new EmbedBuilder()
                .setColor('#4CAF50')
                .setTitle('üìÖ –í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
                .setDescription(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, ${user.username}`)
                .setThumbnail(interaction.user.displayAvatarURL());
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
            if (activeRegs.length > 0) {
                embed.addFields({
                    name: 'üìå –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                    value: this.formatDetailedEventList(activeRegs)
                });
            } else {
                embed.addFields({
                    name: 'üìå –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                    value: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
                });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∞—Ö –æ–∂–∏–¥–∞–Ω–∏—è
            if (waitlistRegs.length > 0) {
                embed.addFields({
                    name: '‚è≥ –õ–∏—Å—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è',
                    value: this.formatDetailedWaitlistPositions(waitlistRegs)
                });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
            if (completedRegs.length > 0) {
                embed.addFields({
                    name: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                    value: this.formatCompletedEventList(completedRegs)
                });
            }
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–∞—à–±–æ—Ä–¥—É
            const actionRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('dashboard_back')
                        .setLabel('–ù–∞–∑–∞–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('‚óÄÔ∏è')
                );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await interaction.editReply({
                embeds: [embed],
                components: [actionRow]
            });
            
        } catch (error) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ middleware
            const handled = await Middleware.handleError(error, interaction);
            
            if (!handled) {
                logger.error(`Error in dashboard view events: ${error.message}`);
                
                await interaction.editReply({ 
                    content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    components: []
                });
            }
        }
    },
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
     * @param {Array} registrations - –°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
     */
    formatDetailedEventList(registrations) {
        return registrations.map(reg => {
            const event = reg.eventId;
            const startTime = Math.floor(new Date(event.startDate).getTime() / 1000);
            const endTime = Math.floor(new Date(event.endDate).getTime() / 1000);
            
            return [
                `**${event.title}**`,
                `üìÖ –ù–∞—á–∞–ª–æ: <t:${startTime}:F>`,
                `‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: <t:${endTime}:F>`,
                `üìç –ú–µ—Å—Ç–æ: ${event.location || '–û–Ω–ª–∞–π–Ω'}`,
                `üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞: ${reg.accessKey ? '‚úÖ –ü–æ–ª—É—á–µ–Ω' : '‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω'}`
            ].join('\n');
        }).join('\n\n');
    },
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –≤ –ª–∏—Å—Ç–∞—Ö –æ–∂–∏–¥–∞–Ω–∏—è
     * @param {Array} waitlistPositions - –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
     */
    formatDetailedWaitlistPositions(waitlistPositions) {
        return waitlistPositions.map(reg => {
            const event = reg.eventId;
            const startTime = Math.floor(new Date(event.startDate).getTime() / 1000);
            const position = reg.waitlistPosition;
            
            return [
                `**${event.title}**`,
                `üìÖ –ù–∞—á–∞–ª–æ: <t:${startTime}:F>`,
                `üî¢ –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${position}`,
                `üë• –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${event.maxParticipants}`
            ].join('\n');
        }).join('\n\n');
    },
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
     * @param {Array} registrations - –°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
     */
    formatCompletedEventList(registrations) {
        const recentEvents = registrations.slice(0, 5);
        
        const formattedList = recentEvents.map(reg => {
            const event = reg.eventId;
            const date = Math.floor(new Date(event.endDate).getTime() / 1000);
            
            return `‚úÖ **${event.title}** - <t:${date}:D>`;
        }).join('\n');
        
        if (registrations.length > 5) {
            return formattedList + `\n...–∏ –µ—â–µ ${registrations.length - 5} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π`;
        }
        
        return formattedList;
    },
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     * @param {Object} interaction - –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
     */
    async handleViewAchievements(interaction) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            await Middleware.rateLimit(interaction);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            const user = await Middleware.requireProfile(interaction);
            
            // –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            await interaction.deferUpdate();
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const achievementProgress = await AchievementManager.getUserAchievementProgress(user.discordId);
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
            const embed = new EmbedBuilder()
                .setColor('#FFD700')
                .setTitle('üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
                .setDescription(`–ü—Ä–æ–≥—Ä–µ—Å—Å –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, ${user.username}`)
                .setThumbnail(interaction.user.displayAvatarURL());
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
            const earnedAchievements = achievementProgress.filter(a => a.achieved);
            const inProgressAchievements = achievementProgress.filter(a => !a.achieved && a.progress > 0);
            const lockedAchievements = achievementProgress.filter(a => !a.achieved && a.progress === 0);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
            if (earnedAchievements.length > 0) {
                embed.addFields({
                    name: '‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                    value: this.formatAchievementProgress(earnedAchievements)
                });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            if (inProgressAchievements.length > 0) {
                embed.addFields({
                    name: 'üîÑ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ',
                    value: this.formatAchievementProgress(inProgressAchievements)
                });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
            if (lockedAchievements.length > 0) {
                embed.addFields({
                    name: 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                    value: this.formatAchievementProgress(lockedAchievements)
                });
            }
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–∞—à–±–æ—Ä–¥—É
            const actionRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('dashboard_back')
                        .setLabel('–ù–∞–∑–∞–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('‚óÄÔ∏è')
                );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await interaction.editReply({
                embeds: [embed],
                components: [actionRow]
            });
            
        } catch (error) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ middleware
            const handled = await Middleware.handleError(error, interaction);
            
            if (!handled) {
                logger.error(`Error in dashboard view achievements: ${error.message}`);
                
                await interaction.editReply({ 
                    content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    components: []
                });
            }
        }
    },
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     * @param {Array} achievements - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
     */
    formatAchievementProgress(achievements) {
        if (achievements.length === 0) {
            return '–ù–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
        }
        
        return achievements.map(ach => {
            let progressText = '';
            
            if (ach.achieved) {
                const earnedDate = Math.floor(new Date(ach.earnedAt).getTime() / 1000);
                progressText = `–ü–æ–ª—É—á–µ–Ω–æ <t:${earnedDate}:D>`;
            } else {
                progressText = `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${ach.progress}% (${ach.currentValue}/${ach.requirement})`;
            }
            
            return `${ach.icon} **${ach.name}** - ${ach.description}\n${progressText}`;
        }).join('\n\n');
    },
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
     * @param {Object} interaction - –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
     */
    async handleEditProfile(interaction) {
        try {
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ñ–∏–ª—è —Å –æ–ø—Ü–∏–µ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const profileCommand = require('./profile');
            await profileCommand.handleEditProfile(interaction);
        } catch (error) {
            logger.error(`Error in dashboard edit profile: ${error.message}`);
            
            await interaction.reply({ 
                content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     * @param {Object} interaction - –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
     */
    async handleNotificationSettings(interaction) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            await Middleware.rateLimit(interaction);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            const user = await Middleware.requireProfile(interaction);
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            const embed = new EmbedBuilder()
                .setColor('#2196F3')
                .setTitle('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
                .setDescription(`–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, ${user.username}`)
                .addFields(
                    { 
                        name: 'üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö', 
                        value: user.notificationSettings.eventReminders ? '‚úÖ –í–∫–ª—é—á–µ–Ω–æ' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ',
                        inline: true
                    },
                    { 
                        name: '‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è', 
                        value: user.notificationSettings.waitlistUpdates ? '‚úÖ –í–∫–ª—é—á–µ–Ω–æ' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ',
                        inline: true
                    },
                    { 
                        name: 'üèÜ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö', 
                        value: user.notificationSettings.achievementAlerts ? '‚úÖ –í–∫–ª—é—á–µ–Ω–æ' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ',
                        inline: true
                    },
                    { 
                        name: 'üì® –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', 
                        value: user.notificationSettings.directMessages ? '‚úÖ –í–∫–ª—é—á–µ–Ω–æ' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ',
                        inline: true
                    }
                );
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            const actionRow1 = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('notification_toggle_event_reminders')
                        .setLabel('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
                        .setStyle(user.notificationSettings.eventReminders ? ButtonStyle.Success : ButtonStyle.Danger)
                        .setEmoji('üìÖ'),
                    new ButtonBuilder()
                        .setCustomId('notification_toggle_waitlist_updates')
                        .setLabel('–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è')
                        .setStyle(user.notificationSettings.waitlistUpdates ? ButtonStyle.Success : ButtonStyle.Danger)
                        .setEmoji('‚è≥')
                );
            
            const actionRow2 = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('notification_toggle_achievement_alerts')
                        .setLabel('–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
                        .setStyle(user.notificationSettings.achievementAlerts ? ButtonStyle.Success : ButtonStyle.Danger)
                        .setEmoji('üèÜ'),
                    new ButtonBuilder()
                        .setCustomId('notification_toggle_direct_messages')
                        .setLabel('–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
                        .setStyle(user.notificationSettings.directMessages ? ButtonStyle.Success : ButtonStyle.Danger)
                        .setEmoji('üì®')
                );
            
            // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–∞—à–±–æ—Ä–¥—É
            const actionRow3 = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('dashboard_back')
                        .setLabel('–ù–∞–∑–∞–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('‚óÄÔ∏è')
                );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await interaction.reply({
                embeds: [embed],
                components: [actionRow1, actionRow2, actionRow3],
                ephemeral: true
            });
            
        } catch (error) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ middleware
            const handled = await Middleware.handleError(error, interaction);
            
            if (!handled) {
                logger.error(`Error in notification settings: ${error.message}`);
                
                await interaction.reply({ 
                    content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    ephemeral: true
                });
            }
        }
    },
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–∞—à–±–æ—Ä–¥—É
     * @param {Object} interaction - –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
     */
    async handleBackToDashboard(interaction) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            await Middleware.rateLimit(interaction);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            const user = await Middleware.requireProfile(interaction);
            
            // –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            await interaction.deferUpdate();
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
            const dashboardData = await this.getDashboardData(user.discordId);
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            const embed = this.createDashboardEmbed(dashboardData, user);
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            const actionRow = this.createActionButtons(dashboardData);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await interaction.editReply({
                embeds: [embed],
                components: [actionRow]
            });
            
        } catch (error) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ middleware
            const handled = await Middleware.handleError(error, interaction);
            
            if (!handled) {
                logger.error(`Error in back to dashboard: ${error.message}`);
                
                await interaction.editReply({ 
                    content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –¥–∞—à–±–æ—Ä–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    components: []
                });
            }
        }
    },
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     * @param {Object} interaction - –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
     * @param {string} settingKey - –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    async handleToggleNotification(interaction, settingKey) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            await Middleware.rateLimit(interaction);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            const user = await Middleware.requireProfile(interaction);
            
            // –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            await interaction.deferUpdate();
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            const currentValue = user.notificationSettings[settingKey];
            const newSettings = { [settingKey]: !currentValue };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await user.updateNotificationSettings(newSettings);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await this.handleNotificationSettings(interaction);
            
        } catch (error) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ middleware
            const handled = await Middleware.handleError(error, interaction);
            
            if (!handled) {
                logger.error(`Error in toggle notification: ${error.message}`);
                
                await interaction.editReply({ 
                    content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    components: []
                });
            }
        }
    }
};
