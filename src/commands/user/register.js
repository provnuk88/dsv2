const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const Event = require('../../database/models/Event');
const Registration = require('../../database/models/Registration');
const User = require('../../database/models/User');
const logger = require('../../utils/logger');
const waitlistManager = require('../../utils/waitlistManager');
const eventScheduler = require('../../utils/eventScheduler');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('register')
        .setDescription('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
        .addStringOption(option =>
            option.setName('event_id')
                .setDescription('ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
                .setRequired(false)),
    
    async execute(interaction) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userProfile = await User.findOne({ discordId: interaction.user.id });
            
            if (!userProfile) {
                return interaction.reply({
                    content: '‚ö†Ô∏è –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/profile edit` –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.',
                    ephemeral: true
                });
            }
            
            // –ü–æ–ª—É—á–∞–µ–º ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ –æ–ø—Ü–∏–π –∫–æ–º–∞–Ω–¥—ã
            const eventId = interaction.options.getString('event_id');
            
            // –ï—Å–ª–∏ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É–∫–∞–∑–∞–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            if (eventId) {
                await this.registerForEvent(interaction, eventId);
            }
            // –ï—Å–ª–∏ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            else {
                await this.showEventsList(interaction);
            }
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã register: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    async showEventsList(interaction) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            const events = await Event.find({
                guildId: interaction.guildId,
                status: 'active',
                date: { $gt: new Date() }
            }).sort({ date: 1 });
            
            if (events.length === 0) {
                return interaction.reply({
                    content: 'üìÖ –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
                    ephemeral: true
                });
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userRegistrations = await Registration.find({
                discordId: interaction.user.id,
                guildId: interaction.guildId
            });
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            const eventsEmbed = new EmbedBuilder()
                .setColor(0x0099FF)
                .setTitle('–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
                .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:')
                .setFooter({ text: 'Synergy Guild Bot' })
                .setTimestamp();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
            for (const event of events) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
                const isRegistered = userRegistrations.some(reg => reg.eventId.toString() === event._id.toString() && reg.status !== 'cancelled');
                
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                const eventDate = new Date(event.date);
                const formattedDate = eventDate.toLocaleDateString('ru-RU', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric'
                });
                const formattedTime = eventDate.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit'
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                eventsEmbed.addFields({
                    name: `${event.title} (${formattedDate} ${formattedTime})`,
                    value: `${event.description.substring(0, 100)}${event.description.length > 100 ? '...' : ''}\n` +
                           `–£—á–∞—Å—Ç–Ω–∏–∫–∏: ${event.currentParticipants}/${event.maxParticipants}\n` +
                           `–°—Ç–∞—Ç—É—Å: ${isRegistered ? '‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã' : '‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞'}\n` +
                           `ID: ${event._id}`
                });
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–±–µ–¥
            await interaction.reply({
                embeds: [eventsEmbed],
                ephemeral: true
            });
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    async registerForEvent(interaction, eventId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const event = await Event.findById(eventId);
            
            // –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            if (!event) {
                return interaction.reply({
                    content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                    ephemeral: true
                });
            }
            
            // –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ
            if (event.status !== 'active') {
                return interaction.reply({
                    content: `‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}" –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.`,
                    ephemeral: true
                });
            }
            
            // –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ
            if (new Date(event.date) < new Date()) {
                return interaction.reply({
                    content: `‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}" —É–∂–µ –ø—Ä–æ—à–ª–æ. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.`,
                    ephemeral: true
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            const existingRegistration = await Registration.findOne({
                discordId: interaction.user.id,
                eventId: eventId,
                status: { $ne: 'cancelled' }
            });
            
            if (existingRegistration) {
                // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
                const eventEmbed = this.createEventEmbed(event, true);
                
                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                const row = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`event_cancel_${eventId}`)
                            .setLabel('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                            .setStyle(ButtonStyle.Danger)
                    );
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–¥–∞–Ω –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
                const distributedKey = event.distributedKeys.find(dk => dk.discordId === interaction.user.id);
                const keyMessage = distributedKey 
                    ? `\n\n**–í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:** \`${distributedKey.key}\``
                    : '';
                
                return interaction.reply({
                    content: `‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}".${keyMessage}`,
                    embeds: [eventEmbed],
                    components: [row],
                    ephemeral: true
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
            if (event.currentParticipants >= event.maxParticipants) {
                // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
                const row = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`event_waitlist_${eventId}`)
                            .setLabel('–î–æ–±–∞–≤–∏—Ç—å –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è')
                            .setStyle(ButtonStyle.Primary)
                    );
                
                return interaction.reply({
                    content: `‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}" —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è.`,
                    components: [row],
                    ephemeral: true
                });
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            const registration = new Registration({
                discordId: interaction.user.id,
                eventId: eventId,
                guildId: interaction.guildId,
                status: 'confirmed',
                registrationDate: new Date()
            });
            
            await registration.save();
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            event.currentParticipants += 1;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞ –∏ –≤—ã–¥–∞–µ–º –∫–ª—é—á, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            let accessKeyMessage = '';
            let accessKey = null;
            
            if (event.accessKeys && event.accessKeys.length > 0) {
                // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á
                accessKey = event.accessKeys[0];
                
                // –£–¥–∞–ª—è–µ–º –∫–ª—é—á –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
                event.accessKeys.splice(0, 1);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–¥–∞–Ω–Ω—ã—Ö
                event.distributedKeys.push({
                    discordId: interaction.user.id,
                    key: accessKey,
                    distributedAt: new Date()
                });
                
                accessKeyMessage = `\n\n**–í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:** \`${accessKey}\``;
                
                // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–¥–∞—á—É –∫–ª—é—á–∞
                logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${interaction.user.tag} (${interaction.user.id}) –≤—ã–¥–∞–Ω –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "${event.title}" (${eventId})`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â–µ –∫–ª—é—á–∏
                if (event.accessKeys.length === 0) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ —Ç–æ–º, —á—Ç–æ –∫–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
                    this.sendKeyExhaustionNotification(interaction.client, event);
                }
            } else if (event.distributedKeys && event.distributedKeys.length > 0) {
                // –ï—Å–ª–∏ –∫–ª—é—á–∏ –±—ã–ª–∏, –Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
                accessKeyMessage = '\n\n‚ö†Ô∏è –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–æ, –ø—Ä–∏—Ö–æ–¥–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –∏ –ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø —Ç–∞–º.';
                
                // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–π
                logger.info(`–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${interaction.user.tag} (${interaction.user.id}) –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "${event.title}" (${eventId})`);
            }
            
            await event.save();
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.tag} (${interaction.user.id}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}" (${eventId})`);
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
            const eventEmbed = this.createEventEmbed(event, true);
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`event_cancel_${eventId}`)
                        .setLabel('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                        .setStyle(ButtonStyle.Danger)
                );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await interaction.reply({
                content: `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}"!${accessKeyMessage}`,
                embeds: [eventEmbed],
                components: [row],
                ephemeral: true
            });
            
            // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (event.notificationChannelId) {
                try {
                    const channel = await interaction.client.channels.fetch(event.notificationChannelId);
                    
                    if (channel) {
                        const notificationEmbed = new EmbedBuilder()
                            .setColor(0x00FF00)
                            .setTitle(`–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}"`)
                            .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.`)
                            .addFields(
                                { name: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', value: event.title, inline: true },
                                { name: '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', value: new Date(event.date).toLocaleString('ru-RU'), inline: true },
                                { name: '–£—á–∞—Å—Ç–Ω–∏–∫–∏', value: `${event.currentParticipants}/${event.maxParticipants}`, inline: true }
                            )
                            .setFooter({ text: 'Synergy Guild Bot' })
                            .setTimestamp();
                        
                        await channel.send({ embeds: [notificationEmbed] });
                    }
                } catch (error) {
                    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`);
                }
            }
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ —Ç–æ–º, —á—Ç–æ –∫–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
    async sendKeyExhaustionNotification(client, event) {
        try {
            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—É–¥–∞
            if (event.notificationChannelId) {
                const channel = await client.channels.fetch(event.notificationChannelId);
                
                if (channel) {
                    const notificationEmbed = new EmbedBuilder()
                        .setColor(0xFF0000)
                        .setTitle(`‚ö†Ô∏è –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!`)
                        .setDescription(`–î–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "${event.title}" –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞.`)
                        .addFields(
                            { name: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', value: event.title, inline: true },
                            { name: 'ID', value: event._id.toString(), inline: true },
                            { name: '–í—ã–¥–∞–Ω–æ –∫–ª—é—á–µ–π', value: event.distributedKeys.length.toString(), inline: true }
                        )
                        .setFooter({ text: 'Synergy Guild Bot' })
                        .setTimestamp();
                    
                    await channel.send({ 
                        content: `<@&${event.creatorId}> –í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞.`,
                        embeds: [notificationEmbed] 
                    });
                    
                    logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "${event.title}" (${event._id})`);
                }
            }
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫–ª—é—á–∏: ${error.message}`);
        }
    },
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    async handleButton(interaction) {
        try {
            const customId = interaction.customId;
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if (customId.startsWith('event_cancel_')) {
                const eventId = customId.replace('event_cancel_', '');
                await this.cancelRegistration(interaction, eventId);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
            else if (customId.startsWith('event_waitlist_')) {
                const eventId = customId.replace('event_waitlist_', '');
                await this.addToWaitlist(interaction, eventId);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
            else if (customId.startsWith('event_waitlist_cancel_')) {
                const eventId = customId.replace('event_waitlist_cancel_', '');
                await this.cancelWaitlist(interaction, eventId);
            }
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },
    
    // –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    async cancelRegistration(interaction, eventId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const event = await Event.findById(eventId);
            
            // –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            if (!event) {
                return interaction.reply({
                    content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                    ephemeral: true
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            const registration = await Registration.findOne({
                discordId: interaction.user.id,
                eventId: eventId,
                status: { $ne: 'cancelled' }
            });
            
            if (!registration) {
                return interaction.reply({
                    content: `‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}".`,
                    ephemeral: true
                });
            }
            
            // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            registration.status = 'cancelled';
            registration.cancelledAt = new Date();
            await registration.save();
            
            // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            event.currentParticipants -= 1;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–¥–∞–Ω –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
            const distributedKeyIndex = event.distributedKeys.findIndex(dk => dk.discordId === interaction.user.id);
            
            if (distributedKeyIndex !== -1) {
                // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á
                const distributedKey = event.distributedKeys[distributedKeyIndex];
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á –≤ –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
                event.accessKeys.push(distributedKey.key);
                
                // –£–¥–∞–ª—è–µ–º –∫–ª—é—á –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–Ω—ã—Ö
                event.distributedKeys.splice(distributedKeyIndex, 1);
                
                // –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫–ª—é—á–∞
                logger.info(`–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –ø—É–ª –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "${event.title}" (${eventId}) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${interaction.user.tag} (${interaction.user.id})`);
            }
            
            await event.save();
            
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.tag} (${interaction.user.id}) –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}" (${eventId})`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
            const nextWaitlistUser = await waitlistManager.getNextWaitlistUser(eventId);
            
            if (nextWaitlistUser) {
                // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
                await waitlistManager.removeFromWaitlist(eventId, nextWaitlistUser);
                
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
                const newRegistration = new Registration({
                    discordId: nextWaitlistUser,
                    eventId: eventId,
                    guildId: interaction.guildId,
                    status: 'confirmed',
                    registrationDate: new Date(),
                    fromWaitlist: true
                });
                
                await newRegistration.save();
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                event.currentParticipants += 1;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞ –∏ –≤—ã–¥–∞–µ–º –∫–ª—é—á, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                let accessKey = null;
                
                if (event.accessKeys && event.accessKeys.length > 0) {
                    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á
                    accessKey = event.accessKeys[0];
                    
                    // –£–¥–∞–ª—è–µ–º –∫–ª—é—á –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
                    event.accessKeys.splice(0, 1);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–¥–∞–Ω–Ω—ã—Ö
                    event.distributedKeys.push({
                        discordId: nextWaitlistUser,
                        key: accessKey,
                        distributedAt: new Date()
                    });
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–¥–∞—á—É –∫–ª—é—á–∞
                    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${nextWaitlistUser} –≤—ã–¥–∞–Ω –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "${event.title}" (${eventId}) –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è`);
                }
                
                await event.save();
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
                try {
                    const user = await interaction.client.users.fetch(nextWaitlistUser);
                    
                    if (user) {
                        const eventEmbed = this.createEventEmbed(event, true);
                        
                        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                        const row = new ActionRowBuilder()
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId(`event_cancel_${eventId}`)
                                    .setLabel('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                                    .setStyle(ButtonStyle.Danger)
                            );
                        
                        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–ª—é—á–µ –¥–æ—Å—Ç—É–ø–∞
                        let accessKeyMessage = '';
                        
                        if (accessKey) {
                            accessKeyMessage = `\n\n**–í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:** \`${accessKey}\``;
                        } else if (event.distributedKeys && event.distributedKeys.length > 0) {
                            accessKeyMessage = '\n\n‚ö†Ô∏è –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–æ, –ø—Ä–∏—Ö–æ–¥–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –∏ –ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø —Ç–∞–º.';
                        }
                        
                        await user.send({
                            content: `‚úÖ –û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}"! –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –±—ã–ª–∏ –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è.${accessKeyMessage}`,
                            embeds: [eventEmbed],
                            components: [row]
                        });
                        
                        // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${nextWaitlistUser} –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}" (${eventId}) –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è`);
                    }
                } catch (error) {
                    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è: ${error.message}`);
                }
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await interaction.reply({
                content: `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}".`,
                ephemeral: true
            });
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
    async addToWaitlist(interaction, eventId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const event = await Event.findById(eventId);
            
            // –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            if (!event) {
                return interaction.reply({
                    content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                    ephemeral: true
                });
            }
            
            // –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ
            if (event.status !== 'active') {
                return interaction.reply({
                    content: `‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}" –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.`,
                    ephemeral: true
                });
            }
            
            // –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ
            if (new Date(event.date) < new Date()) {
                return interaction.reply({
                    content: `‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}" —É–∂–µ –ø—Ä–æ—à–ª–æ. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.`,
                    ephemeral: true
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            const existingRegistration = await Registration.findOne({
                discordId: interaction.user.id,
                eventId: eventId,
                status: { $ne: 'cancelled' }
            });
            
            if (existingRegistration) {
                return interaction.reply({
                    content: `‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}".`,
                    ephemeral: true
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
            const isInWaitlist = await waitlistManager.isInWaitlist(eventId, interaction.user.id);
            
            if (isInWaitlist) {
                return interaction.reply({
                    content: `‚úÖ –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}".`,
                    ephemeral: true
                });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
            await waitlistManager.addToWaitlist(eventId, interaction.user.id);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
            logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.tag} (${interaction.user.id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}" (${eventId})`);
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
            const eventEmbed = this.createEventEmbed(event);
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`event_waitlist_cancel_${eventId}`)
                        .setLabel('–ü–æ–∫–∏–Ω—É—Ç—å –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è')
                        .setStyle(ButtonStyle.Danger)
                );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await interaction.reply({
                content: `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}". –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –µ—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ.`,
                embeds: [eventEmbed],
                components: [row],
                ephemeral: true
            });
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },
    
    // –û—Ç–º–µ–Ω–∞ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    async cancelWaitlist(interaction, eventId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const event = await Event.findById(eventId);
            
            // –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            if (!event) {
                return interaction.reply({
                    content: `‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                    ephemeral: true
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
            const isInWaitlist = await waitlistManager.isInWaitlist(eventId, interaction.user.id);
            
            if (!isInWaitlist) {
                return interaction.reply({
                    content: `‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}".`,
                    ephemeral: true
                });
            }
            
            // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
            await waitlistManager.removeFromWaitlist(eventId, interaction.user.id);
            
            // –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
            logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.tag} (${interaction.user.id}) —É–¥–∞–ª–µ–Ω –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}" (${eventId})`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await interaction.reply({
                content: `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}".`,
                ephemeral: true
            });
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    createEventEmbed(event, isRegistered = false) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        const eventDate = new Date(event.date);
        const formattedDate = eventDate.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
        const formattedTime = eventDate.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });
        
        // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥
        const eventEmbed = new EmbedBuilder()
            .setColor(isRegistered ? 0x00FF00 : 0x0099FF)
            .setTitle(event.title)
            .setDescription(event.description)
            .addFields(
                { name: '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', value: `${formattedDate} ${formattedTime}`, inline: true },
                { name: '–£—á–∞—Å—Ç–Ω–∏–∫–∏', value: `${event.currentParticipants}/${event.maxParticipants}`, inline: true },
                { name: '–°—Ç–∞—Ç—É—Å', value: isRegistered ? '‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã' : '‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞', inline: true }
            )
            .setFooter({ text: 'Synergy Guild Bot' })
            .setTimestamp();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∑–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (event.prizes && event.prizes.length > 0) {
            eventEmbed.addFields({ name: '–ü—Ä–∏–∑—ã', value: event.prizes });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (event.requirements && event.requirements.length > 0) {
            eventEmbed.addFields({ name: '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è', value: event.requirements });
        }
        
        return eventEmbed;
    }
};
