const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const User = require('../../database/models/User');
const Event = require('../../database/models/Event');
const Registration = require('../../database/models/Registration');
const AdminLog = require('../../database/models/AdminLog');
const logger = require('../../utils/logger');
const commandPermissions = require('../../utils/commandPermissions');
const webhookExporter = require('../../utils/webhookExporter');
const fs = require('fs');
const path = require('path');
const { createObjectCsvWriter } = require('csv-writer');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('exportdata')
        .setDescription('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–æ—Ç–∞')
        .addSubcommand(subcommand =>
            subcommand
                .setName('users')
                .setDescription('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                .addStringOption(option =>
                    option.setName('format')
                        .setDescription('–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞')
                        .setRequired(true)
                        .addChoices(
                            { name: 'CSV', value: 'csv' },
                            { name: 'JSON', value: 'json' }
                        ))
                .addStringOption(option =>
                    option.setName('webhook')
                        .setDescription('URL –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
                        .setRequired(false)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('events')
                .setDescription('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')
                .addStringOption(option =>
                    option.setName('format')
                        .setDescription('–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞')
                        .setRequired(true)
                        .addChoices(
                            { name: 'CSV', value: 'csv' },
                            { name: 'JSON', value: 'json' }
                        ))
                .addStringOption(option =>
                    option.setName('webhook')
                        .setDescription('URL –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
                        .setRequired(false)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('registrations')
                .setDescription('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
                .addStringOption(option =>
                    option.setName('format')
                        .setDescription('–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞')
                        .setRequired(true)
                        .addChoices(
                            { name: 'CSV', value: 'csv' },
                            { name: 'JSON', value: 'json' }
                        ))
                .addStringOption(option =>
                    option.setName('eventid')
                        .setDescription('ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
                        .setRequired(false))
                .addStringOption(option =>
                    option.setName('webhook')
                        .setDescription('URL –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
                        .setRequired(false))),
    
    async execute(interaction) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (!commandPermissions.hasAdminPermission(interaction.member)) {
                return interaction.reply({
                    content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.',
                    ephemeral: true
                });
            }

            await interaction.deferReply({ ephemeral: true });
            
            const subcommand = interaction.options.getSubcommand();
            const format = interaction.options.getString('format');
            const webhook = interaction.options.getString('webhook');
            
            switch (subcommand) {
                case 'users':
                    await this.exportUsers(interaction, format, webhook);
                    break;
                case 'events':
                    await this.exportEvents(interaction, format, webhook);
                    break;
                case 'registrations':
                    const eventId = interaction.options.getString('eventid');
                    await this.exportRegistrations(interaction, format, eventId, webhook);
                    break;
                default:
                    await interaction.editReply({
                        content: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞.',
                        ephemeral: true
                    });
            }
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã exportdata: ${error.message}`);
            await interaction.editReply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async exportUsers(interaction, format, webhook) {
        try {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const users = await User.find({}).sort({ registeredAt: -1 });
            
            if (users.length === 0) {
                return interaction.editReply({
                    content: 'üë• –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.',
                    ephemeral: true
                });
            }
            
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            const exportData = users.map(user => ({
                discordId: user.discordId,
                discordTag: user.discordTag,
                nickname: user.nickname || '',
                telegram: user.telegram || '',
                email: user.email || '',
                wallets: user.wallets.join(', '),
                registeredAt: new Date(user.registeredAt).toLocaleString('ru-RU'),
                updatedAt: user.updatedAt ? new Date(user.updatedAt).toLocaleString('ru-RU') : ''
            }));
            
            // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            const fileName = `users_export_${Date.now()}.${format}`;
            const filePath = path.join(__dirname, '..', '..', '..', 'exports', fileName);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const exportDir = path.join(__dirname, '..', '..', '..', 'exports');
            if (!fs.existsSync(exportDir)) {
                fs.mkdirSync(exportDir, { recursive: true });
            }
            
            if (format === 'csv') {
                // –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
                const csvWriter = createObjectCsvWriter({
                    path: filePath,
                    header: [
                        { id: 'discordId', title: 'Discord ID' },
                        { id: 'discordTag', title: 'Discord Tag' },
                        { id: 'nickname', title: '–ù–∏–∫–Ω–µ–π–º' },
                        { id: 'telegram', title: 'Telegram' },
                        { id: 'email', title: 'Email' },
                        { id: 'wallets', title: '–ö–æ—à–µ–ª—å–∫–∏' },
                        { id: 'registeredAt', title: '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' },
                        { id: 'updatedAt', title: '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' }
                    ]
                });
                
                await csvWriter.writeRecords(exportData);
            } else {
                // –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
                fs.writeFileSync(filePath, JSON.stringify(exportData, null, 2));
            }
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if (webhook) {
                try {
                    await webhookExporter.sendDataToWebhook(webhook, filePath, `–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (${users.length})`);
                    
                    await interaction.editReply({
                        content: `‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫!\n–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`,
                        ephemeral: true
                    });
                } catch (webhookError) {
                    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫: ${webhookError.message}`);
                    
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                    await interaction.editReply({
                        content: `‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!\n–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫: ${webhookError.message}`,
                        files: [filePath],
                        ephemeral: true
                    });
                }
            } else {
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
                await interaction.editReply({
                    content: `‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!\n–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`,
                    files: [filePath],
                    ephemeral: true
                });
            }
            
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            logger.info(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${interaction.user.tag} (${interaction.user.id}) —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format}`);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const adminLog = new AdminLog({
                adminId: interaction.user.id,
                action: 'export_users',
                details: `–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format}`,
                timestamp: new Date()
            });
            
            await adminLog.save();
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
            await interaction.editReply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    async exportEvents(interaction, format, webhook) {
        try {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            const events = await Event.find({}).sort({ startDate: -1 });
            
            if (events.length === 0) {
                return interaction.editReply({
                    content: 'üìÖ –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.',
                    ephemeral: true
                });
            }
            
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            const exportData = events.map(event => ({
                id: event._id.toString(),
                title: event.title,
                description: event.description || '',
                location: event.location || '',
                startDate: new Date(event.startDate).toLocaleString('ru-RU'),
                endDate: event.endDate ? new Date(event.endDate).toLocaleString('ru-RU') : '',
                maxParticipants: event.maxParticipants || '–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ',
                status: event.status,
                createdBy: event.createdBy,
                createdAt: new Date(event.createdAt).toLocaleString('ru-RU'),
                updatedAt: event.updatedAt ? new Date(event.updatedAt).toLocaleString('ru-RU') : ''
            }));
            
            // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            const fileName = `events_export_${Date.now()}.${format}`;
            const filePath = path.join(__dirname, '..', '..', '..', 'exports', fileName);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const exportDir = path.join(__dirname, '..', '..', '..', 'exports');
            if (!fs.existsSync(exportDir)) {
                fs.mkdirSync(exportDir, { recursive: true });
            }
            
            if (format === 'csv') {
                // –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
                const csvWriter = createObjectCsvWriter({
                    path: filePath,
                    header: [
                        { id: 'id', title: 'ID' },
                        { id: 'title', title: '–ù–∞–∑–≤–∞–Ω–∏–µ' },
                        { id: 'description', title: '–û–ø–∏—Å–∞–Ω–∏–µ' },
                        { id: 'location', title: '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è' },
                        { id: 'startDate', title: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞' },
                        { id: 'endDate', title: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è' },
                        { id: 'maxParticipants', title: '–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' },
                        { id: 'status', title: '–°—Ç–∞—Ç—É—Å' },
                        { id: 'createdBy', title: '–°–æ–∑–¥–∞—Ç–µ–ª—å' },
                        { id: 'createdAt', title: '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è' },
                        { id: 'updatedAt', title: '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' }
                    ]
                });
                
                await csvWriter.writeRecords(exportData);
            } else {
                // –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
                fs.writeFileSync(filePath, JSON.stringify(exportData, null, 2));
            }
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if (webhook) {
                try {
                    await webhookExporter.sendDataToWebhook(webhook, filePath, `–≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (${events.length})`);
                    
                    await interaction.editReply({
                        content: `‚úÖ –î–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫!\n–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${events.length} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.`,
                        ephemeral: true
                    });
                } catch (webhookError) {
                    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫: ${webhookError.message}`);
                    
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                    await interaction.editReply({
                        content: `‚úÖ –î–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!\n–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${events.length} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫: ${webhookError.message}`,
                        files: [filePath],
                        ephemeral: true
                    });
                }
            } else {
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
                await interaction.editReply({
                    content: `‚úÖ –î–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!\n–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${events.length} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.`,
                    files: [filePath],
                    ephemeral: true
                });
            }
            
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            logger.info(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${interaction.user.tag} (${interaction.user.id}) —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format}`);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const adminLog = new AdminLog({
                adminId: interaction.user.id,
                action: 'export_events',
                details: `–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${events.length} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format}`,
                timestamp: new Date()
            });
            
            await adminLog.save();
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ${error.message}`);
            await interaction.editReply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    async exportRegistrations(interaction, format, eventId, webhook) {
        try {
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
            const query = eventId ? { eventId } : {};
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
            const registrations = await Registration.find(query).sort({ registeredAt: -1 });
            
            if (registrations.length === 0) {
                return interaction.editReply({
                    content: 'üìù –ù–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.',
                    ephemeral: true
                });
            }
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            const userIds = [...new Set(registrations.map(reg => reg.userId))];
            const eventIds = [...new Set(registrations.map(reg => reg.eventId))];
            
            const users = await User.find({ discordId: { $in: userIds } });
            const events = await Event.find({ _id: { $in: eventIds } });
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            const userMap = new Map(users.map(user => [user.discordId, user]));
            const eventMap = new Map(events.map(event => [event._id.toString(), event]));
            
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            const exportData = registrations.map(reg => {
                const user = userMap.get(reg.userId);
                const event = eventMap.get(reg.eventId);
                
                return {
                    id: reg._id.toString(),
                    userId: reg.userId,
                    userNickname: user ? user.nickname || user.discordTag : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    userTelegram: user ? user.telegram || '' : '',
                    userEmail: user ? user.email || '' : '',
                    userWallets: user ? user.wallets.join(', ') : '',
                    eventId: reg.eventId,
                    eventTitle: event ? event.title : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
                    eventStartDate: event ? new Date(event.startDate).toLocaleString('ru-RU') : '',
                    status: reg.status,
                    registeredAt: new Date(reg.registeredAt).toLocaleString('ru-RU'),
                    updatedAt: reg.updatedAt ? new Date(reg.updatedAt).toLocaleString('ru-RU') : '',
                    notes: reg.notes || ''
                };
            });
            
            // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            const fileName = `registrations_export_${Date.now()}.${format}`;
            const filePath = path.join(__dirname, '..', '..', '..', 'exports', fileName);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const exportDir = path.join(__dirname, '..', '..', '..', 'exports');
            if (!fs.existsSync(exportDir)) {
                fs.mkdirSync(exportDir, { recursive: true });
            }
            
            if (format === 'csv') {
                // –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
                const csvWriter = createObjectCsvWriter({
                    path: filePath,
                    header: [
                        { id: 'id', title: 'ID' },
                        { id: 'userId', title: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
                        { id: 'userNickname', title: '–ù–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
                        { id: 'userTelegram', title: 'Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
                        { id: 'userEmail', title: 'Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
                        { id: 'userWallets', title: '–ö–æ—à–µ–ª—å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
                        { id: 'eventId', title: 'ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è' },
                        { id: 'eventTitle', title: '–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è' },
                        { id: 'eventStartDate', title: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è' },
                        { id: 'status', title: '–°—Ç–∞—Ç—É—Å' },
                        { id: 'registeredAt', title: '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' },
                        { id: 'updatedAt', title: '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' },
                        { id: 'notes', title: '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è' }
                    ]
                });
                
                await csvWriter.writeRecords(exportData);
            } else {
                // –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
                fs.writeFileSync(filePath, JSON.stringify(exportData, null, 2));
            }
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if (webhook) {
                try {
                    await webhookExporter.sendDataToWebhook(webhook, filePath, `–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π (${registrations.length})`);
                    
                    await interaction.editReply({
                        content: `‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫!\n–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${registrations.length} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.`,
                        ephemeral: true
                    });
                } catch (webhookError) {
                    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫: ${webhookError.message}`);
                    
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                    await interaction.editReply({
                        content: `‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!\n–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${registrations.length} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫: ${webhookError.message}`,
                        files: [filePath],
                        ephemeral: true
                    });
                }
            } else {
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
                await interaction.editReply({
                    content: `‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!\n–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${registrations.length} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.`,
                    files: [filePath],
                    ephemeral: true
                });
            }
            
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            logger.info(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${interaction.user.tag} (${interaction.user.id}) —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format}`);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const adminLog = new AdminLog({
                adminId: interaction.user.id,
                action: 'export_registrations',
                details: `–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${registrations.length} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format}`,
                timestamp: new Date()
            });
            
            await adminLog.save();
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: ${error.message}`);
            await interaction.editReply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    }
};
