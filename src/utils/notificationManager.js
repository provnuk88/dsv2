/**
 * –ú–æ–¥—É–ª—å —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Discord
 */

const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const User = require('../database/models/User');
const Event = require('../database/models/Event');
const Registration = require('../database/models/Registration');
const botEvents = require('../events/botEvents');
const logger = require('./logger');
const client = require('../index').client;

class NotificationManager {
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    static initialize() {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –±–æ—Ç–∞
        this.setupEventListeners();
        logger.info('Notification manager initialized');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    static setupEventListeners() {
        // –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        botEvents.on('event.created', this.handleEventCreated.bind(this));
        
        // –°–æ–±—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        botEvents.on('registration.created', this.handleRegistrationCreated.bind(this));
        
        // –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        botEvents.on('registration.statusChanged', this.handleRegistrationStatusChanged.bind(this));
        
        // –°–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        botEvents.on('registration.cancelled', this.handleRegistrationCancelled.bind(this));
        
        // –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        botEvents.on('event.approaching', this.handleEventApproaching.bind(this));
        
        // –°–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        botEvents.on('event.started', this.handleEventStarted.bind(this));
        
        // –°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        botEvents.on('event.ended', this.handleEventEnded.bind(this));
        
        // –°–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        botEvents.on('achievement.earned', this.handleAchievementEarned.bind(this));
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param {Object} eventData - –î–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     */
    static async handleEventCreated(eventId, eventData) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            const announcementChannelId = process.env.ANNOUNCEMENT_CHANNEL_ID;
            
            if (!announcementChannelId) {
                logger.warn('Announcement channel ID not configured');
                return;
            }
            
            const channel = await client.channels.fetch(announcementChannelId);
            
            if (!channel) {
                logger.warn(`Announcement channel ${announcementChannelId} not found`);
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
            const startTime = Math.floor(new Date(eventData.startDate).getTime() / 1000);
            const endTime = Math.floor(new Date(eventData.endDate).getTime() / 1000);
            
            const embed = new EmbedBuilder()
                .setColor('#4CAF50')
                .setTitle('üéâ –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!')
                .setDescription(`**${eventData.title}**\n\n${eventData.description}`)
                .addFields(
                    { name: 'üìÖ –ù–∞—á–∞–ª–æ', value: `<t:${startTime}:F>`, inline: true },
                    { name: '‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ', value: `<t:${endTime}:F>`, inline: true },
                    { name: 'üìç –ú–µ—Å—Ç–æ', value: eventData.location || '–û–Ω–ª–∞–π–Ω', inline: true },
                    { name: 'üë• –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', value: eventData.maxParticipants.toString(), inline: true }
                )
                .setFooter({ text: 'Synergy Guild Bot' });
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            const actionRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`register_${eventId}`)
                        .setLabel('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('‚úÖ')
                );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            await channel.send({ embeds: [embed], components: [actionRow] });
            
            logger.info(`Sent announcement for event: ${eventData.title} (${eventId})`);
        } catch (error) {
            logger.error(`Error handling event created notification: ${error.message}`);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
     * @param {string} registrationId - ID —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     * @param {Object} registrationData - –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     */
    static async handleRegistrationCreated(registrationId, registrationData) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            const user = await User.findOne({ discordId: registrationData.userId });
            const event = await Event.findById(registrationData.eventId);
            
            if (!user || !event) {
                logger.warn(`User or event not found for registration ${registrationId}`);
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord
            const discordUser = await client.users.fetch(user.discordId);
            
            if (!discordUser) {
                logger.warn(`Discord user ${user.discordId} not found`);
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            const startTime = Math.floor(new Date(event.startDate).getTime() / 1000);
            const endTime = Math.floor(new Date(event.endDate).getTime() / 1000);
            
            const embed = new EmbedBuilder()
                .setColor(registrationData.status === 'confirmed' ? '#4CAF50' : '#FFC107')
                .setTitle(registrationData.status === 'confirmed' ? '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' : '‚è≥ –í—ã –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è')
                .setDescription(`–í—ã ${registrationData.status === 'confirmed' ? '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã' : '–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è'} –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ **${event.title}**`)
                .addFields(
                    { name: 'üìÖ –ù–∞—á–∞–ª–æ', value: `<t:${startTime}:F>`, inline: true },
                    { name: '‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ', value: `<t:${endTime}:F>`, inline: true },
                    { name: 'üìç –ú–µ—Å—Ç–æ', value: event.location || '–û–Ω–ª–∞–π–Ω', inline: true }
                );
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ –¥–æ—Å—Ç—É–ø–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (registrationData.accessKey) {
                embed.addFields({ name: 'üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞', value: `\`${registrationData.accessKey}\`` });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
            if (registrationData.status === 'waitlist') {
                embed.addFields({ 
                    name: 'üìã –°—Ç–∞—Ç—É—Å', 
                    value: '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –µ—Å–ª–∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ.' 
                });
            }
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            const actionRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`cancel_registration_${registrationId}`)
                        .setLabel('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                        .setStyle(ButtonStyle.Danger)
                        .setEmoji('‚ùå')
                );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await discordUser.send({ embeds: [embed], components: [actionRow] });
            
            logger.info(`Sent registration confirmation to user: ${user.discordId} for event: ${event.title}`);
        } catch (error) {
            logger.error(`Error handling registration created notification: ${error.message}`);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     * @param {string} registrationId - ID —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     * @param {Object} registrationData - –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     * @param {string} oldStatus - –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
     * @param {string} newStatus - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
     */
    static async handleRegistrationStatusChanged(registrationId, registrationData, oldStatus, newStatus) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            const user = await User.findOne({ discordId: registrationData.userId });
            const event = await Event.findById(registrationData.eventId);
            
            if (!user || !event) {
                logger.warn(`User or event not found for registration ${registrationId}`);
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord
            const discordUser = await client.users.fetch(user.discordId);
            
            if (!discordUser) {
                logger.warn(`Discord user ${user.discordId} not found`);
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            const startTime = Math.floor(new Date(event.startDate).getTime() / 1000);
            
            let embed;
            
            // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            if (oldStatus === 'waitlist' && newStatus === 'confirmed') {
                embed = new EmbedBuilder()
                    .setColor('#4CAF50')
                    .setTitle('‚úÖ –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è')
                    .setDescription(`–î–ª—è –≤–∞—Å –æ—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ **${event.title}**!`)
                    .addFields(
                        { name: 'üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', value: `<t:${startTime}:F>`, inline: true },
                        { name: 'üìç –ú–µ—Å—Ç–æ', value: event.location || '–û–Ω–ª–∞–π–Ω', inline: true }
                    );
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ –¥–æ—Å—Ç—É–ø–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if (registrationData.accessKey) {
                    embed.addFields({ name: 'üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞', value: `\`${registrationData.accessKey}\`` });
                }
            } else if (newStatus === 'completed') {
                embed = new EmbedBuilder()
                    .setColor('#2196F3')
                    .setTitle('üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
                    .setDescription(`–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ **${event.title}**!`)
                    .addFields(
                        { name: 'üìä –°—Ç–∞—Ç—É—Å', value: '–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ' }
                    );
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                const achievements = user.achievements.filter(a => a.earnedAt > new Date(Date.now() - 3600000));
                
                if (achievements.length > 0) {
                    const achievementsList = achievements
                        .map(a => `üèÜ **${a.name}**: ${a.description}`)
                        .join('\n');
                    
                    embed.addFields({ name: 'üèÜ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', value: achievementsList });
                }
            }
            
            if (embed) {
                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
                const actionRow = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`view_profile_${user.discordId}`)
                            .setLabel('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
                            .setStyle(ButtonStyle.Secondary)
                            .setEmoji('üë§')
                    );
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await discordUser.send({ embeds: [embed], components: [actionRow] });
                
                logger.info(`Sent status change notification to user: ${user.discordId} for event: ${event.title}`);
            }
        } catch (error) {
            logger.error(`Error handling registration status changed notification: ${error.message}`);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     * @param {string} registrationId - ID —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     * @param {Object} registrationData - –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     */
    static async handleRegistrationCancelled(registrationId, registrationData) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            const user = await User.findOne({ discordId: registrationData.userId });
            const event = await Event.findById(registrationData.eventId);
            
            if (!user || !event) {
                logger.warn(`User or event not found for registration ${registrationId}`);
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord
            const discordUser = await client.users.fetch(user.discordId);
            
            if (!discordUser) {
                logger.warn(`Discord user ${user.discordId} not found`);
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            const embed = new EmbedBuilder()
                .setColor('#F44336')
                .setTitle('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
                .setDescription(`–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ **${event.title}** –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.`)
                .addFields(
                    { name: 'üìã –°—Ç–∞—Ç—É—Å', value: '–û—Ç–º–µ–Ω–µ–Ω–æ' }
                )
                .setFooter({ text: '–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –º–µ—Å—Ç–∞ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω—ã.' });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await discordUser.send({ embeds: [embed] });
            
            logger.info(`Sent cancellation notification to user: ${user.discordId} for event: ${event.title}`);
            
            // –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
            if (event.stats.registrationsCount < event.maxParticipants) {
                await this.notifyNextWaitlistUser(event._id);
            }
        } catch (error) {
            logger.error(`Error handling registration cancelled notification: ${error.message}`);
        }
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
     * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     */
    static async notifyNextWaitlistUser(eventId) {
        try {
            // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
            const waitlistRegistration = await Registration.findOne({
                eventId,
                status: 'waitlist'
            }).sort({ registrationDate: 1 });
            
            if (!waitlistRegistration) {
                logger.info(`No users in waitlist for event ${eventId}`);
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            const user = await User.findOne({ discordId: waitlistRegistration.userId });
            const event = await Event.findById(eventId);
            
            if (!user || !event) {
                logger.warn(`User or event not found for waitlist notification`);
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord
            const discordUser = await client.users.fetch(user.discordId);
            
            if (!discordUser) {
                logger.warn(`Discord user ${user.discordId} not found`);
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            waitlistRegistration.status = 'confirmed';
            await waitlistRegistration.save();
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
            const startTime = Math.floor(new Date(event.startDate).getTime() / 1000);
            
            const embed = new EmbedBuilder()
                .setColor('#4CAF50')
                .setTitle('‚úÖ –û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ!')
                .setDescription(`–î–ª—è –≤–∞—Å –æ—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ **${event.title}**!`)
                .addFields(
                    { name: 'üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', value: `<t:${startTime}:F>`, inline: true },
                    { name: 'üìç –ú–µ—Å—Ç–æ', value: event.location || '–û–Ω–ª–∞–π–Ω', inline: true },
                    { name: 'üìã –°—Ç–∞—Ç—É—Å', value: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' }
                );
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ –¥–æ—Å—Ç—É–ø–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (waitlistRegistration.accessKey) {
                embed.addFields({ name: 'üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞', value: `\`${waitlistRegistration.accessKey}\`` });
            }
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            const actionRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`cancel_registration_${waitlistRegistration._id}`)
                        .setLabel('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                        .setStyle(ButtonStyle.Danger)
                        .setEmoji('‚ùå')
                );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await discordUser.send({ embeds: [embed], components: [actionRow] });
            
            logger.info(`Notified waitlist user: ${user.discordId} for event: ${event.title}`);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            botEvents.emit('registration.statusChanged', 
                waitlistRegistration._id.toString(), 
                waitlistRegistration, 
                'waitlist', 
                'confirmed'
            );
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            event.stats.waitlistCount--;
            event.stats.registrationsCount++;
            await event.save();
        } catch (error) {
            logger.error(`Error notifying next waitlist user: ${error.message}`);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param {Object} eventData - –î–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     */
    static async handleEventApproaching(eventId, eventData) {
        try {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            const registrations = await Registration.find({
                eventId,
                status: 'confirmed'
            });
            
            if (registrations.length === 0) {
                logger.info(`No confirmed registrations for event ${eventId}`);
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
            const startTime = Math.floor(new Date(eventData.startDate).getTime() / 1000);
            
            const embed = new EmbedBuilder()
                .setColor('#2196F3')
                .setTitle('‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏')
                .setDescription(`–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ **${eventData.title}** –Ω–∞—á–Ω–µ—Ç—Å—è —Å–∫–æ—Ä–æ!`)
                .addFields(
                    { name: 'üìÖ –ù–∞—á–∞–ª–æ', value: `<t:${startTime}:F>`, inline: true },
                    { name: 'üìç –ú–µ—Å—Ç–æ', value: eventData.location || '–û–Ω–ª–∞–π–Ω', inline: true }
                );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
            for (const registration of registrations) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord
                    const discordUser = await client.users.fetch(registration.userId);
                    
                    if (!discordUser) {
                        logger.warn(`Discord user ${registration.userId} not found`);
                        continue;
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ –¥–æ—Å—Ç—É–ø–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    const embedWithKey = EmbedBuilder.from(embed);
                    
                    if (registration.accessKey) {
                        embedWithKey.addFields({ name: 'üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞', value: `\`${registration.accessKey}\`` });
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    const actionRow = new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId(`cancel_registration_${registration._id}`)
                                .setLabel('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                                .setStyle(ButtonStyle.Danger)
                                .setEmoji('‚ùå')
                        );
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await discordUser.send({ embeds: [embedWithKey], components: [actionRow] });
                    
                    logger.info(`Sent reminder to user: ${registration.userId} for event: ${eventData.title}`);
                } catch (error) {
                    logger.error(`Error sending reminder to user ${registration.userId}: ${error.message}`);
                }
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            const announcementChannelId = process.env.ANNOUNCEMENT_CHANNEL_ID;
            
            if (announcementChannelId) {
                try {
                    const channel = await client.channels.fetch(announcementChannelId);
                    
                    if (channel) {
                        // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ –¥–ª—è –∫–∞–Ω–∞–ª–∞
                        const channelEmbed = new EmbedBuilder()
                            .setColor('#2196F3')
                            .setTitle('‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏')
                            .setDescription(`–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ **${eventData.title}** –Ω–∞—á–Ω–µ—Ç—Å—è <t:${startTime}:R>!`)
                            .addFields(
                                { name: 'üìÖ –ù–∞—á–∞–ª–æ', value: `<t:${startTime}:F>`, inline: true },
                                { name: 'üìç –ú–µ—Å—Ç–æ', value: eventData.location || '–û–Ω–ª–∞–π–Ω', inline: true },
                                { name: 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', value: `${registrations.length}/${eventData.maxParticipants}`, inline: true }
                            );
                        
                        await channel.send({ embeds: [channelEmbed] });
                        
                        logger.info(`Sent reminder to announcement channel for event: ${eventData.title}`);
                    }
                } catch (error) {
                    logger.error(`Error sending reminder to announcement channel: ${error.message}`);
                }
            }
        } catch (error) {
            logger.error(`Error handling event approaching notification: ${error.message}`);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param {Object} eventData - –î–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     */
    static async handleEventStarted(eventId, eventData) {
        try {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            const registrations = await Registration.find({
                eventId,
                status: 'confirmed'
            });
            
            if (registrations.length === 0) {
                logger.info(`No confirmed registrations for event ${eventId}`);
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –Ω–∞—á–∞–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            const embed = new EmbedBuilder()
                .setColor('#673AB7')
                .setTitle('üé¨ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!')
                .setDescription(`–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ **${eventData.title}** –Ω–∞—á–∞–ª–æ—Å—å!`)
                .addFields(
                    { name: 'üìç –ú–µ—Å—Ç–æ', value: eventData.location || '–û–Ω–ª–∞–π–Ω' }
                );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
            for (const registration of registrations) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord
                    const discordUser = await client.users.fetch(registration.userId);
                    
                    if (!discordUser) {
                        logger.warn(`Discord user ${registration.userId} not found`);
                        continue;
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ –¥–æ—Å—Ç—É–ø–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    const embedWithKey = EmbedBuilder.from(embed);
                    
                    if (registration.accessKey) {
                        embedWithKey.addFields({ name: 'üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞', value: `\`${registration.accessKey}\`` });
                    }
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await discordUser.send({ embeds: [embedWithKey] });
                    
                    logger.info(`Sent start notification to user: ${registration.userId} for event: ${eventData.title}`);
                } catch (error) {
                    logger.error(`Error sending start notification to user ${registration.userId}: ${error.message}`);
                }
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            const announcementChannelId = process.env.ANNOUNCEMENT_CHANNEL_ID;
            
            if (announcementChannelId) {
                try {
                    const channel = await client.channels.fetch(announcementChannelId);
                    
                    if (channel) {
                        // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ –¥–ª—è –∫–∞–Ω–∞–ª–∞
                        const channelEmbed = new EmbedBuilder()
                            .setColor('#673AB7')
                            .setTitle('üé¨ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!')
                            .setDescription(`–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ **${eventData.title}** –Ω–∞—á–∞–ª–æ—Å—å!`)
                            .addFields(
                                { name: 'üìç –ú–µ—Å—Ç–æ', value: eventData.location || '–û–Ω–ª–∞–π–Ω' },
                                { name: 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', value: `${registrations.length}/${eventData.maxParticipants}` }
                            );
                        
                        await channel.send({ embeds: [channelEmbed] });
                        
                        logger.info(`Sent start notification to announcement channel for event: ${eventData.title}`);
                    }
                } catch (error) {
                    logger.error(`Error sending start notification to announcement channel: ${error.message}`);
                }
            }
        } catch (error) {
            logger.error(`Error handling event started notification: ${error.message}`);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param {Object} eventData - –î–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     */
    static async handleEventEnded(eventId, eventData) {
        try {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            const registrations = await Registration.find({
                eventId,
                status: 'confirmed'
            });
            
            if (registrations.length === 0) {
                logger.info(`No confirmed registrations for event ${eventId}`);
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            const embed = new EmbedBuilder()
                .setColor('#9C27B0')
                .setTitle('üèÅ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
                .setDescription(`–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ **${eventData.title}** –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`)
                .addFields(
                    { name: 'üìã –°—Ç–∞—Ç—É—Å', value: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' }
                );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            for (const registration of registrations) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord
                    const discordUser = await client.users.fetch(registration.userId);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    registration.status = 'completed';
                    await registration.save();
                    
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    botEvents.emit('registration.statusChanged', 
                        registration._id.toString(), 
                        registration, 
                        'confirmed', 
                        'completed'
                    );
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const user = await User.findOne({ discordId: registration.userId });
                    
                    if (user) {
                        user.stats.eventsCompleted++;
                        user.stats.lastActive = new Date();
                        await user.save();
                    }
                    
                    if (!discordUser) {
                        logger.warn(`Discord user ${registration.userId} not found`);
                        continue;
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
                    const actionRow = new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId(`view_profile_${registration.userId}`)
                                .setLabel('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
                                .setStyle(ButtonStyle.Secondary)
                                .setEmoji('üë§')
                        );
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await discordUser.send({ embeds: [embed], components: [actionRow] });
                    
                    logger.info(`Sent end notification to user: ${registration.userId} for event: ${eventData.title}`);
                } catch (error) {
                    logger.error(`Error sending end notification to user ${registration.userId}: ${error.message}`);
                }
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            const announcementChannelId = process.env.ANNOUNCEMENT_CHANNEL_ID;
            
            if (announcementChannelId) {
                try {
                    const channel = await client.channels.fetch(announcementChannelId);
                    
                    if (channel) {
                        // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ –¥–ª—è –∫–∞–Ω–∞–ª–∞
                        const channelEmbed = new EmbedBuilder()
                            .setColor('#9C27B0')
                            .setTitle('üèÅ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
                            .setDescription(`–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ **${eventData.title}** –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`)
                            .addFields(
                                { name: 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', value: `${registrations.length}/${eventData.maxParticipants}` },
                                { name: 'üìä –°—Ç–∞—Ç—É—Å', value: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' }
                            );
                        
                        await channel.send({ embeds: [channelEmbed] });
                        
                        logger.info(`Sent end notification to announcement channel for event: ${eventData.title}`);
                    }
                } catch (error) {
                    logger.error(`Error sending end notification to announcement channel: ${error.message}`);
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            eventData.stats.completionRate = Math.round((registrations.length / eventData.stats.registrationsCount) * 100);
            eventData.active = false;
            await eventData.save();
        } catch (error) {
            logger.error(`Error handling event ended notification: ${error.message}`);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} achievementData - –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    static async handleAchievementEarned(userId, achievementData) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord
            const discordUser = await client.users.fetch(userId);
            
            if (!discordUser) {
                logger.warn(`Discord user ${userId} not found`);
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            const embed = new EmbedBuilder()
                .setColor('#FF9800')
                .setTitle('üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!')
                .setDescription(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: **${achievementData.name}**`)
                .addFields(
                    { name: 'üìù –û–ø–∏—Å–∞–Ω–∏–µ', value: achievementData.description },
                    { name: 'üìÖ –ü–æ–ª—É—á–µ–Ω–æ', value: new Date(achievementData.earnedAt).toLocaleString() }
                );
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
            const actionRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`view_profile_${userId}`)
                        .setLabel('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('üë§')
                );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await discordUser.send({ embeds: [embed], components: [actionRow] });
            
            logger.info(`Sent achievement notification to user: ${userId} for achievement: ${achievementData.name}`);
        } catch (error) {
            logger.error(`Error handling achievement earned notification: ${error.message}`);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
     * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     * @param {string} message - –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     * @param {string} color - –¶–≤–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (hex)
     * @param {boolean} sendDM - –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @returns {Promise<number>} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–ª—É—á–∏–≤—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
     */
    static async sendAnnouncement(title, message, color = '#2196F3', sendDM = false) {
        try {
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º
            const embed = new EmbedBuilder()
                .setColor(color)
                .setTitle(title)
                .setDescription(message)
                .setTimestamp()
                .setFooter({ text: 'Synergy Guild Bot' });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            const announcementChannelId = process.env.ANNOUNCEMENT_CHANNEL_ID;
            
            if (!announcementChannelId) {
                logger.warn('Announcement channel ID not configured');
                return 0;
            }
            
            const channel = await client.channels.fetch(announcementChannelId);
            
            if (!channel) {
                logger.warn(`Announcement channel ${announcementChannelId} not found`);
                return 0;
            }
            
            await channel.send({ embeds: [embed] });
            
            logger.info(`Sent announcement to channel: ${title}`);
            
            // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (sendDM) {
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                const users = await User.find();
                let sentCount = 0;
                
                for (const user of users) {
                    try {
                        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord
                        const discordUser = await client.users.fetch(user.discordId);
                        
                        if (!discordUser) {
                            logger.warn(`Discord user ${user.discordId} not found`);
                            continue;
                        }
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await discordUser.send({ embeds: [embed] });
                        
                        sentCount++;
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ API
                        await new Promise(resolve => setTimeout(resolve, 100));
                    } catch (error) {
                        logger.error(`Error sending announcement to user ${user.discordId}: ${error.message}`);
                    }
                }
                
                logger.info(`Sent announcement to ${sentCount} users via DM`);
                return sentCount;
            }
            
            return 0;
        } catch (error) {
            logger.error(`Error sending announcement: ${error.message}`);
            return 0;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    static async checkUpcomingEvents() {
        try {
            const now = new Date();
            const oneHourLater = new Date(now.getTime() + 60 * 60 * 1000);
            
            // –ù–∞—Ö–æ–¥–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–Ω—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
            const upcomingEvents = await Event.find({
                active: true,
                startDate: { $gt: now, $lt: oneHourLater }
            });
            
            for (const event of upcomingEvents) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                botEvents.emit('event.approaching', event._id.toString(), event);
            }
            
            // –ù–∞—Ö–æ–¥–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏—Å—å
            const startedEvents = await Event.find({
                active: true,
                startDate: { $lt: now },
                endDate: { $gt: now },
                'stats.notifiedStart': { $ne: true }
            });
            
            for (const event of startedEvents) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                botEvents.emit('event.started', event._id.toString(), event);
                
                // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                event.stats.notifiedStart = true;
                await event.save();
            }
            
            // –ù–∞—Ö–æ–¥–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
            const endedEvents = await Event.find({
                active: true,
                endDate: { $lt: now },
                'stats.notifiedEnd': { $ne: true }
            });
            
            for (const event of endedEvents) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                botEvents.emit('event.ended', event._id.toString(), event);
                
                // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                event.stats.notifiedEnd = true;
                await event.save();
            }
        } catch (error) {
            logger.error(`Error checking upcoming events: ${error.message}`);
        }
    }
}

module.exports = NotificationManager;
