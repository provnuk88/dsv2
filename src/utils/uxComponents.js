/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Discord-–±–æ—Ç–∞ Synergy Guild
 * –ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
 */

const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder } = require('discord.js');
const logger = require('./logger');

class UXComponents {
    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —ç–º–±–µ–¥–∞—Ö
     * @param {number} current - –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     * @param {number} max - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     * @param {number} size - –†–∞–∑–º–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤)
     * @param {string} filledChar - –°–∏–º–≤–æ–ª –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏
     * @param {string} emptyChar - –°–∏–º–≤–æ–ª –¥–ª—è –ø—É—Å—Ç–æ–π —á–∞—Å—Ç–∏
     * @returns {string} –°—Ç—Ä–æ–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
     */
    static createProgressBar(current, max, size = 10, filledChar = '‚ñ†', emptyChar = '‚ñ°') {
        if (max <= 0) return emptyChar.repeat(size);
        
        const percentage = Math.min(Math.max(current / max, 0), 1);
        const filledCount = Math.round(size * percentage);
        const emptyCount = size - filledCount;
        
        return filledChar.repeat(filledCount) + emptyChar.repeat(emptyCount);
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
     * @param {Object} event - –û–±—ä–µ–∫—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param {boolean} detailed - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
     * @returns {EmbedBuilder} –≠–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    static createEventEmbed(event, detailed = false) {
        try {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ Unix timestamp –¥–ª—è Discord —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const startTime = Math.floor(new Date(event.startDate).getTime() / 1000);
            const endTime = Math.floor(new Date(event.endDate).getTime() / 1000);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            let color = '#2196F3'; // –°–∏–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            const now = new Date();
            const startDate = new Date(event.startDate);
            const endDate = new Date(event.endDate);
            
            if (now > endDate) {
                color = '#9E9E9E'; // –°–µ—Ä—ã–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
            } else if (now >= startDate && now <= endDate) {
                color = '#4CAF50'; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ç–µ–∫—É—â–∏—Ö
            } else if (startDate.getTime() - now.getTime() < 24 * 60 * 60 * 1000) {
                color = '#FF9800'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —Å–∫–æ—Ä—ã—Ö
            }
            
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —ç–º–±–µ–¥
            const embed = new EmbedBuilder()
                .setColor(color)
                .setTitle(event.title)
                .setDescription(event.description);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            embed.addFields(
                { name: 'üìÖ –ù–∞—á–∞–ª–æ', value: `<t:${startTime}:F>`, inline: true },
                { name: '‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ', value: `<t:${endTime}:F>`, inline: true },
                { name: 'üìç –ú–µ—Å—Ç–æ', value: event.location || '–û–Ω–ª–∞–π–Ω', inline: true }
            );
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö
            const registrationsBar = this.createProgressBar(
                event.stats.registrationsCount,
                event.maxParticipants
            );
            
            embed.addFields({
                name: 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏',
                value: `${registrationsBar} ${event.stats.registrationsCount}/${event.maxParticipants}`,
                inline: false
            });
            
            // –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if (detailed) {
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
                if (event.stats.waitlistCount > 0) {
                    embed.addFields({
                        name: 'üìã –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è',
                        value: `${event.stats.waitlistCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
                        inline: true
                    });
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–∞—Ö –¥–æ—Å—Ç—É–ø–∞
                if (event.accessKeys && event.accessKeys.length > 0) {
                    const availableKeys = event.accessKeys.filter(key => !key.issuedTo).length;
                    const totalKeys = event.accessKeys.length;
                    
                    const keysBar = this.createProgressBar(
                        totalKeys - availableKeys,
                        totalKeys
                    );
                    
                    embed.addFields({
                        name: 'üîë –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞',
                        value: `${keysBar} ${availableKeys}/${totalKeys} –¥–æ—Å—Ç—É–ø–Ω–æ`,
                        inline: true
                    });
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–º—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
                if (event.recurring && event.recurring.isRecurring) {
                    const frequencyMap = {
                        daily: '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
                        weekly: '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
                        monthly: '–µ–∂–µ–º–µ—Å—è—á–Ω–æ'
                    };
                    
                    const frequency = frequencyMap[event.recurring.frequency] || event.recurring.frequency;
                    
                    embed.addFields({
                        name: 'üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ',
                        value: `${frequency} (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${event.recurring.interval})`,
                        inline: true
                    });
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
                embed.addFields({
                    name: 'üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å',
                    value: `<@${event.createdBy}>`,
                    inline: true
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø–æ–ª—è—Ö –ø—Ä–æ—Ñ–∏–ª—è
                if (event.requiredProfileFields && event.requiredProfileFields.length > 0) {
                    embed.addFields({
                        name: 'üìù –¢—Ä–µ–±—É–µ–º—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è',
                        value: event.requiredProfileFields.join(', '),
                        inline: false
                    });
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
            embed.setFooter({
                text: `ID: ${event._id} ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: ${new Date(event.createdAt).toLocaleDateString()}`
            });
            
            return embed;
        } catch (error) {
            logger.error(`Error creating event embed: ${error.message}`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —ç–º–±–µ–¥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return new EmbedBuilder()
                .setColor('#F44336')
                .setTitle('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–º–±–µ–¥–∞')
                .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–º–±–µ–¥–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.');
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {boolean} detailed - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
     * @returns {EmbedBuilder} –≠–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    static createProfileEmbed(user, detailed = false) {
        try {
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —ç–º–±–µ–¥
            const embed = new EmbedBuilder()
                .setColor('#3F51B5')
                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å ${user.username}`)
                .setDescription(user.bio || '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            const fields = [];
            
            if (user.telegram) {
                fields.push({ name: 'Telegram', value: user.telegram, inline: true });
            }
            
            if (user.twitter) {
                fields.push({ name: 'Twitter', value: user.twitter, inline: true });
            }
            
            if (user.wallet) {
                fields.push({ name: '–ö–æ—à–µ–ª–µ–∫', value: `\`${user.wallet}\``, inline: true });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            fields.push({
                name: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                value: [
                    `üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ—Å–µ—â–µ–Ω–æ: **${user.stats.eventsCompleted}**`,
                    `üéüÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: **${user.stats.eventsJoined}**`,
                    `üõ†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å–æ–∑–¥–∞–Ω–æ: **${user.stats.eventsCreated}**`
                ].join('\n'),
                inline: false
            });
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if (user.achievements && user.achievements.length > 0) {
                const achievementsText = user.achievements
                    .map(a => `üèÜ **${a.name}**: ${a.description}`)
                    .join('\n');
                
                fields.push({
                    name: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                    value: achievementsText,
                    inline: false
                });
            }
            
            // –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if (detailed && user.additionalInfo) {
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                const additionalInfoText = Object.entries(user.additionalInfo)
                    .map(([key, value]) => `**${key}**: ${value}`)
                    .join('\n');
                
                if (additionalInfoText) {
                    fields.push({
                        name: 'üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                        value: additionalInfoText,
                        inline: false
                    });
                }
            }
            
            embed.addFields(fields);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
            const joinedAt = user.stats.joinedAt ? new Date(user.stats.joinedAt) : new Date();
            const lastActive = user.stats.lastActive ? new Date(user.stats.lastActive) : joinedAt;
            
            embed.setFooter({
                text: `ID: ${user.discordId} ‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${joinedAt.toLocaleDateString()} ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActive.toLocaleDateString()}`
            });
            
            return embed;
        } catch (error) {
            logger.error(`Error creating profile embed: ${error.message}`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —ç–º–±–µ–¥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return new EmbedBuilder()
                .setColor('#F44336')
                .setTitle('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–º–±–µ–¥–∞')
                .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–º–±–µ–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è.');
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º
     * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param {boolean} isAdmin - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
     * @param {boolean} isRegistered - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @param {string} registrationId - ID —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
     * @returns {ActionRowBuilder[]} –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
     */
    static createEventButtons(eventId, isAdmin = false, isRegistered = false, registrationId = null) {
        try {
            const rows = [];
            
            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const userRow = new ActionRowBuilder();
            
            if (isRegistered && registrationId) {
                // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                userRow.addComponents(
                    new ButtonBuilder()
                        .setCustomId(`cancel_registration_${registrationId}`)
                        .setLabel('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                        .setStyle(ButtonStyle.Danger)
                        .setEmoji('‚ùå')
                );
            } else {
                // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                userRow.addComponents(
                    new ButtonBuilder()
                        .setCustomId(`register_${eventId}`)
                        .setLabel('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('‚úÖ')
                );
            }
            
            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            userRow.addComponents(
                new ButtonBuilder()
                    .setCustomId(`view_participants_${eventId}`)
                    .setLabel('–£—á–∞—Å—Ç–Ω–∏–∫–∏')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üë•')
            );
            
            rows.push(userRow);
            
            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            if (isAdmin) {
                const adminRow = new ActionRowBuilder();
                
                // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                adminRow.addComponents(
                    new ButtonBuilder()
                        .setCustomId(`edit_event_${eventId}`)
                        .setLabel('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('‚úèÔ∏è')
                );
                
                // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                adminRow.addComponents(
                    new ButtonBuilder()
                        .setCustomId(`export_participants_${eventId}`)
                        .setLabel('–≠–∫—Å–ø–æ—Ä—Ç')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('üì§')
                );
                
                // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                adminRow.addComponents(
                    new ButtonBuilder()
                        .setCustomId(`notify_participants_${eventId}`)
                        .setLabel('–£–≤–µ–¥–æ–º–∏—Ç—å')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('üì¢')
                );
                
                // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                adminRow.addComponents(
                    new ButtonBuilder()
                        .setCustomId(`delete_event_${eventId}`)
                        .setLabel('–£–¥–∞–ª–∏—Ç—å')
                        .setStyle(ButtonStyle.Danger)
                        .setEmoji('üóëÔ∏è')
                );
                
                rows.push(adminRow);
            }
            
            return rows;
        } catch (error) {
            logger.error(`Error creating event buttons: ${error.message}`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return [];
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {boolean} isOwner - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–æ—Ñ–∏–ª—è
     * @param {boolean} isAdmin - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
     * @returns {ActionRowBuilder[]} –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
     */
    static createProfileButtons(userId, isOwner = false, isAdmin = false) {
        try {
            const rows = [];
            
            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è
            if (isOwner) {
                const ownerRow = new ActionRowBuilder();
                
                // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                ownerRow.addComponents(
                    new ButtonBuilder()
                        .setCustomId(`edit_profile_basic_${userId}`)
                        .setLabel('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('üìù')
                );
                
                // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤
                ownerRow.addComponents(
                    new ButtonBuilder()
                        .setCustomId(`edit_profile_wallets_${userId}`)
                        .setLabel('–ö–æ—à–µ–ª—å–∫–∏')
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('üí∞')
                );
                
                // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                ownerRow.addComponents(
                    new ButtonBuilder()
                        .setCustomId(`edit_profile_additional_${userId}`)
                        .setLabel('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ')
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('‚ûï')
                );
                
                rows.push(ownerRow);
            }
            
            // –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
            const commonRow = new ActionRowBuilder();
            
            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            commonRow.addComponents(
                new ButtonBuilder()
                    .setCustomId(`view_user_events_${userId}`)
                    .setLabel('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üìÖ')
            );
            
            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            commonRow.addComponents(
                new ButtonBuilder()
                    .setCustomId(`view_user_achievements_${userId}`)
                    .setLabel('–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üèÜ')
            );
            
            rows.push(commonRow);
            
            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            if (isAdmin && !isOwner) {
                const adminRow = new ActionRowBuilder();
                
                // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è
                adminRow.addComponents(
                    new ButtonBuilder()
                        .setCustomId(`reset_profile_${userId}`)
                        .setLabel('–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
                        .setStyle(ButtonStyle.Danger)
                        .setEmoji('üîÑ')
                );
                
                rows.push(adminRow);
            }
            
            return rows;
        } catch (error) {
            logger.error(`Error creating profile buttons: ${error.message}`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return [];
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
     * @param {string} customId - ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     * @returns {ActionRowBuilder} –°—Ç—Ä–æ–∫–∞ —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
     */
    static createEventFilterMenu(customId = 'event_filter') {
        try {
            const row = new ActionRowBuilder();
            
            // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            const menu = new StringSelectMenuBuilder()
                .setCustomId(customId)
                .setPlaceholder('–§–∏–ª—å—Ç—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')
                .addOptions([
                    {
                        label: '–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                        description: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                        value: 'all',
                        emoji: 'üìÖ'
                    },
                    {
                        label: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ',
                        description: '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                        value: 'upcoming',
                        emoji: '‚è∞'
                    },
                    {
                        label: '–¢–µ–∫—É—â–∏–µ',
                        description: '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                        value: 'ongoing',
                        emoji: 'üîÑ'
                    },
                    {
                        label: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ',
                        description: '–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                        value: 'completed',
                        emoji: '‚úÖ'
                    },
                    {
                        label: '–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                        description: '–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã',
                        value: 'registered',
                        emoji: 'üë§'
                    },
                    {
                        label: '–°–æ–∑–¥–∞–Ω–Ω—ã–µ –º–Ω–æ–π',
                        description: '–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏',
                        value: 'created',
                        emoji: 'üõ†Ô∏è'
                    }
                ]);
            
            row.addComponents(menu);
            
            return row;
        } catch (error) {
            logger.error(`Error creating event filter menu: ${error.message}`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return null;
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     * @param {string} baseId - –ë–∞–∑–æ–≤—ã–π ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     * @param {number} currentPage - –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
     * @param {number} totalPages - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
     * @returns {ActionRowBuilder} –°—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    static createPaginationButtons(baseId, currentPage, totalPages) {
        try {
            const row = new ActionRowBuilder();
            
            // –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            row.addComponents(
                new ButtonBuilder()
                    .setCustomId(`${baseId}_first`)
                    .setLabel('‚èÆÔ∏è')
                    .setStyle(ButtonStyle.Secondary)
                    .setDisabled(currentPage <= 1)
            );
            
            // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            row.addComponents(
                new ButtonBuilder()
                    .setCustomId(`${baseId}_prev`)
                    .setLabel('‚óÄÔ∏è')
                    .setStyle(ButtonStyle.Secondary)
                    .setDisabled(currentPage <= 1)
            );
            
            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            row.addComponents(
                new ButtonBuilder()
                    .setCustomId(`${baseId}_page`)
                    .setLabel(`${currentPage} / ${totalPages}`)
                    .setStyle(ButtonStyle.Secondary)
                    .setDisabled(true)
            );
            
            // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            row.addComponents(
                new ButtonBuilder()
                    .setCustomId(`${baseId}_next`)
                    .setLabel('‚ñ∂Ô∏è')
                    .setStyle(ButtonStyle.Secondary)
                    .setDisabled(currentPage >= totalPages)
            );
            
            // –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            row.addComponents(
                new ButtonBuilder()
                    .setCustomId(`${baseId}_last`)
                    .setLabel('‚è≠Ô∏è')
                    .setStyle(ButtonStyle.Secondary)
                    .setDisabled(currentPage >= totalPages)
            );
            
            return row;
        } catch (error) {
            logger.error(`Error creating pagination buttons: ${error.message}`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return null;
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {ActionRowBuilder[]} –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
     */
    static createDashboardQuickActions(userId) {
        try {
            const rows = [];
            
            // –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            const row1 = new ActionRowBuilder();
            
            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
            row1.addComponents(
                new ButtonBuilder()
                    .setCustomId(`view_profile_${userId}`)
                    .setLabel('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üë§')
            );
            
            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            row1.addComponents(
                new ButtonBuilder()
                    .setCustomId('view_events')
                    .setLabel('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üìÖ')
            );
            
            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            row1.addComponents(
                new ButtonBuilder()
                    .setCustomId(`view_user_achievements_${userId}`)
                    .setLabel('–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üèÜ')
            );
            
            rows.push(row1);
            
            // –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            const row2 = new ActionRowBuilder();
            
            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
            row2.addComponents(
                new ButtonBuilder()
                    .setCustomId('view_my_registrations')
                    .setLabel('–ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üéüÔ∏è')
            );
            
            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            row2.addComponents(
                new ButtonBuilder()
                    .setCustomId('view_upcoming_events')
                    .setLabel('–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('‚è∞')
            );
            
            // –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏
            row2.addComponents(
                new ButtonBuilder()
                    .setCustomId('help')
                    .setLabel('–ü–æ–º–æ—â—å')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('‚ùì')
            );
            
            rows.push(row2);
            
            return rows;
        } catch (error) {
            logger.error(`Error creating dashboard quick actions: ${error.message}`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return [];
        }
    }
}

module.exports = UXComponents;
