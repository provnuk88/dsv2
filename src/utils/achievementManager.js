/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

const User = require('../database/models/User');
const botEvents = require('../events/botEvents');
const logger = require('./logger');

class AchievementManager {
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    static ACHIEVEMENTS = {
        newcomer: { 
            name: '–ù–æ–≤–∏—á–æ–∫', 
            icon: 'üéØ', 
            description: '–ü–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', 
            requirement: 1,
            statType: 'eventsJoined'
        },
        active: { 
            name: '–ê–∫—Ç–∏–≤–∏—Å—Ç', 
            icon: 'üî•', 
            description: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ 5 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', 
            requirement: 5,
            statType: 'eventsJoined'
        },
        regular: { 
            name: '–ó–∞–≤—Å–µ–≥–¥–∞—Ç–∞–π', 
            icon: '‚≠ê', 
            description: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ 10 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', 
            requirement: 10,
            statType: 'eventsJoined'
        },
        legend: { 
            name: '–õ–µ–≥–µ–Ω–¥–∞', 
            icon: 'üëë', 
            description: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ 25 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', 
            requirement: 25,
            statType: 'eventsJoined'
        },
        organizer: { 
            name: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä', 
            icon: 'üõ†Ô∏è', 
            description: '–°–æ–∑–¥–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', 
            requirement: 1,
            statType: 'eventsCreated'
        },
        veteran: { 
            name: '–í–µ—Ç–µ—Ä–∞–Ω', 
            icon: 'üèÖ', 
            description: '–ü–æ—Å–µ—Ç–∏–ª–∏ 10 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', 
            requirement: 10,
            statType: 'eventsCompleted'
        }
    };
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} statType - –¢–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @param {number} newValue - –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    static async checkAndAward(userId, statType, newValue) {
        try {
            const user = await User.findOne({ discordId: userId });
            if (!user) {
                logger.warn(`Cannot check achievements: User ${userId} not found`);
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const relevantAchievements = this.getRelevantAchievements(statType);
            
            for (const achKey of relevantAchievements) {
                const achievement = this.ACHIEVEMENTS[achKey];
                const hasAchievement = user.hasAchievement(achKey);
                
                // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                if (!hasAchievement && newValue >= achievement.requirement) {
                    logger.info(`Awarding achievement ${achievement.name} to user ${userId}`);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    const added = await user.addAchievement(achKey);
                    
                    if (added) {
                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                        botEvents.emit('user.achievement_earned', userId, achievement);
                    }
                }
            }
        } catch (error) {
            logger.error(`Error checking achievements: ${error.message}`);
        }
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @param {string} statType - –¢–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @returns {Array} –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    static getRelevantAchievements(statType) {
        return Object.keys(this.ACHIEVEMENTS).filter(
            key => this.ACHIEVEMENTS[key].statType === statType
        );
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ –∫–ª—é—á—É
     * @param {string} achievementKey - –ö–ª—é—á –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
     */
    static getAchievementInfo(achievementKey) {
        return this.ACHIEVEMENTS[achievementKey] || null;
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    static async getUserAchievements(userId) {
        try {
            const user = await User.findOne({ discordId: userId });
            if (!user) {
                return [];
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –∫–∞–∂–¥–æ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é
            return user.achievements.map(ach => {
                const achievementInfo = this.getAchievementInfo(ach.name);
                return {
                    key: ach.name,
                    name: achievementInfo ? achievementInfo.name : ach.name,
                    icon: achievementInfo ? achievementInfo.icon : 'üèÜ',
                    description: achievementInfo ? achievementInfo.description : '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
                    earnedAt: ach.earnedAt
                };
            });
        } catch (error) {
            logger.error(`Error getting user achievements: ${error.message}`);
            return [];
        }
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
     */
    static async getUserAchievementProgress(userId) {
        try {
            const user = await User.findOne({ discordId: userId });
            if (!user) {
                return [];
            }
            
            return Object.entries(this.ACHIEVEMENTS).map(([key, achievement]) => {
                const hasAchievement = user.hasAchievement(key);
                const currentValue = user.stats[achievement.statType] || 0;
                const progress = Math.min(100, Math.floor((currentValue / achievement.requirement) * 100));
                
                return {
                    key,
                    name: achievement.name,
                    icon: achievement.icon,
                    description: achievement.description,
                    requirement: achievement.requirement,
                    currentValue,
                    progress,
                    achieved: hasAchievement,
                    earnedAt: hasAchievement ? 
                        user.achievements.find(a => a.name === key).earnedAt : 
                        null
                };
            });
        } catch (error) {
            logger.error(`Error getting user achievement progress: ${error.message}`);
            return [];
        }
    }
}

module.exports = AchievementManager;
