/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
 */

const Event = require('../database/models/Event');
const botEvents = require('../events/botEvents');
const logger = require('./logger');
const { EmbedBuilder } = require('discord.js');
const client = require('../index').client;

class RecurringEventManager {
    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
     * @param {Object} templateEvent - –®–∞–±–ª–æ–Ω –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
     */
    static async createRecurringEvent(templateEvent) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —à–∞–±–ª–æ–Ω –∏–º–µ–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            if (!templateEvent.recurring || !templateEvent.recurring.isRecurring) {
                throw new Error('Event is not configured for recurring');
            }
            
            // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            const nextDates = this.calculateNextEventDates(
                templateEvent.startDate,
                templateEvent.endDate,
                templateEvent.recurring
            );
            
            if (!nextDates) {
                logger.warn(`No more occurrences for recurring event: ${templateEvent.title}`);
                return null;
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
            const newEventData = {
                title: templateEvent.title,
                description: templateEvent.description,
                startDate: nextDates.startDate,
                endDate: nextDates.endDate,
                location: templateEvent.location,
                maxParticipants: templateEvent.maxParticipants,
                createdBy: templateEvent.createdBy,
                active: true,
                accessKeys: templateEvent.accessKeys.map(key => ({
                    key: key.key,
                    issuedTo: null,
                    issuedAt: null
                })),
                requiredProfileFields: templateEvent.requiredProfileFields,
                recurring: templateEvent.recurring,
                rewards: templateEvent.rewards
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const newEvent = new Event(newEventData);
            await newEvent.save();
            
            logger.info(`Created recurring event: ${newEvent.title} (${newEvent._id}) for ${nextDates.startDate}`);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            botEvents.emit('event.created', newEvent._id.toString(), newEvent);
            
            return newEvent;
        } catch (error) {
            logger.error(`Error creating recurring event: ${error.message}`);
            return null;
        }
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param {Date} lastStartDate - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param {Date} lastEndDate - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param {Object} recurringSettings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
     * @returns {Object|null} –î–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ null, –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
     */
    static calculateNextEventDates(lastStartDate, lastEndDate, recurringSettings) {
        const { frequency, interval, endAfterOccurrences, endDate } = recurringSettings;
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç—ã Date, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        const startDate = new Date(lastStartDate);
        const endDate = new Date(lastEndDate);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        const duration = endDate.getTime() - startDate.getTime();
        
        // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        let nextStartDate = new Date(startDate);
        
        switch (frequency) {
            case 'daily':
                nextStartDate.setDate(nextStartDate.getDate() + interval);
                break;
            case 'weekly':
                nextStartDate.setDate(nextStartDate.getDate() + (interval * 7));
                break;
            case 'monthly':
                nextStartDate.setMonth(nextStartDate.getMonth() + interval);
                break;
            default:
                throw new Error(`Unknown frequency: ${frequency}`);
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        const nextEndDate = new Date(nextStartDate.getTime() + duration);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        if (endAfterOccurrences > 0) {
            // –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            // –≠—Ç–æ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å, –¥–æ–±–∞–≤–∏–≤ —Å—á–µ—Ç—á–∏–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        if (recurringSettings.endDate && nextStartDate > new Date(recurringSettings.endDate)) {
            return null;
        }
        
        return {
            startDate: nextStartDate,
            endDate: nextEndDate
        };
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @returns {Promise<number>} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
     */
    static async checkAndCreateRecurringEvents() {
        try {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            const recurringEvents = await Event.find({
                'recurring.isRecurring': true,
                active: true
            });
            
            logger.info(`Found ${recurringEvents.length} active recurring events`);
            
            let createdCount = 0;
            
            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            for (const event of recurringEvents) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
                const now = new Date();
                const eventEndDate = new Date(event.endDate);
                
                // –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ
                if (eventEndDate < now) {
                    const newEvent = await this.createRecurringEvent(event);
                    
                    if (newEvent) {
                        createdCount++;
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                        await this.notifyAboutNewRecurringEvent(event, newEvent);
                        
                        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
                        event.active = false;
                        await event.save();
                    }
                }
            }
            
            logger.info(`Created ${createdCount} new recurring events`);
            return createdCount;
        } catch (error) {
            logger.error(`Error checking recurring events: ${error.message}`);
            return 0;
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param {Object} oldEvent - –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
     * @param {Object} newEvent - –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
     */
    static async notifyAboutNewRecurringEvent(oldEvent, newEvent) {
        try {
            // –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            // –≠—Ç–æ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
            const notificationChannelId = process.env.NOTIFICATION_CHANNEL_ID;
            
            if (!notificationChannelId) {
                logger.warn('Notification channel ID not configured');
                return;
            }
            
            const channel = await client.channels.fetch(notificationChannelId);
            
            if (!channel) {
                logger.warn(`Notification channel ${notificationChannelId} not found`);
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–æ–≤–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
            const startTime = Math.floor(new Date(newEvent.startDate).getTime() / 1000);
            const endTime = Math.floor(new Date(newEvent.endDate).getTime() / 1000);
            
            const embed = new EmbedBuilder()
                .setColor('#4CAF50')
                .setTitle('üîÑ –ù–æ–≤–æ–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
                .setDescription(`–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: **${newEvent.title}**`)
                .addFields(
                    { name: 'üìÖ –ù–∞—á–∞–ª–æ', value: `<t:${startTime}:F>`, inline: true },
                    { name: '‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ', value: `<t:${endTime}:F>`, inline: true },
                    { name: 'üìç –ú–µ—Å—Ç–æ', value: newEvent.location || '–û–Ω–ª–∞–π–Ω', inline: true },
                    { name: 'üë• –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', value: newEvent.maxParticipants.toString(), inline: true }
                )
                .setFooter({ text: 'Synergy Guild Bot' });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await channel.send({ embeds: [embed] });
            
        } catch (error) {
            logger.error(`Error notifying about new recurring event: ${error.message}`);
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
     * @param {number} intervalMinutes - –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
     */
    static scheduleRecurringEventCheck(intervalMinutes = 60) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        this.checkAndCreateRecurringEvents();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        setInterval(() => {
            this.checkAndCreateRecurringEvents();
        }, intervalMinutes * 60 * 1000);
        
        logger.info(`Scheduled recurring event check every ${intervalMinutes} minutes`);
    }
}

module.exports = RecurringEventManager;
