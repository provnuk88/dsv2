const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const User = require('../../database/models/User');
const AdminLog = require('../../database/models/AdminLog');
const logger = require('../../utils/logger');
const commandPermissions = require('../../utils/commandPermissions');
const profileLogger = require('../../utils/profileLogger');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('manageusers')
        .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏')
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('view')
                .setDescription('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                .addStringOption(option =>
                    option.setName('userid')
                        .setDescription('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('edit')
                .setDescription('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                .addStringOption(option =>
                    option.setName('userid')
                        .setDescription('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('delete')
                .setDescription('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                .addStringOption(option =>
                    option.setName('userid')
                        .setDescription('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord')
                        .setRequired(true))),
    
    async execute(interaction) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (!commandPermissions.hasAdminPermission(interaction.member)) {
                return interaction.reply({
                    content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.',
                    ephemeral: true
                });
            }

            const subcommand = interaction.options.getSubcommand();
            
            switch (subcommand) {
                case 'list':
                    await this.listUsers(interaction);
                    break;
                case 'view':
                    await this.viewUser(interaction);
                    break;
                case 'edit':
                    await this.editUser(interaction);
                    break;
                case 'delete':
                    await this.deleteUser(interaction);
                    break;
                default:
                    await interaction.reply({
                        content: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞.',
                        ephemeral: true
                    });
            }
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã manageusers: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async listUsers(interaction) {
        try {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            const users = await User.find({}).sort({ registeredAt: -1 });
            
            if (users.length === 0) {
                return interaction.reply({
                    content: 'üë• –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
                    ephemeral: true
                });
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const usersEmbed = new EmbedBuilder()
                .setColor(0x0099FF)
                .setTitle('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                .setDescription(`–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
                .setFooter({ text: 'Synergy Guild Bot' })
                .setTimestamp();
            
            // –†–∞–∑–±–∏–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–º–∞–∫—Å–∏–º—É–º 25 –ø–æ–ª–µ–π –≤ —ç–º–±–µ–¥–µ)
            const pageSize = 25;
            const totalPages = Math.ceil(users.length / pageSize);
            const currentPage = 1;
            
            const startIndex = (currentPage - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, users.length);
            
            for (let i = startIndex; i < endIndex; i++) {
                const user = users[i];
                usersEmbed.addFields({
                    name: `${user.nickname || '–ë–µ–∑ –Ω–∏–∫–Ω–µ–π–º–∞'} (ID: ${user.discordId})`,
                    value: `Telegram: ${user.telegram || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n–ö–æ—à–µ–ª—å–∫–∏: ${user.wallets.length > 0 ? user.wallets.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date(user.registeredAt).toLocaleString('ru-RU')}`
                });
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('prev_page')
                        .setLabel('‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è')
                        .setStyle(ButtonStyle.Secondary)
                        .setDisabled(currentPage === 1),
                    new ButtonBuilder()
                        .setCustomId('next_page')
                        .setLabel('–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂Ô∏è')
                        .setStyle(ButtonStyle.Secondary)
                        .setDisabled(currentPage === totalPages)
                );
            
            await interaction.reply({
                embeds: [usersEmbed],
                components: totalPages > 1 ? [row] : [],
                ephemeral: true
            });
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },

    // –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async viewUser(interaction) {
        try {
            const userId = interaction.options.getString('userid');
            
            // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const user = await User.findOne({ discordId: userId });
            
            if (!user) {
                return interaction.reply({
                    content: `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`,
                    ephemeral: true
                });
            }
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è
            const profileChanges = await profileLogger.getProfileChanges(userId);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            const userEmbed = new EmbedBuilder()
                .setColor(0x0099FF)
                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.nickname || '–ë–µ–∑ –Ω–∏–∫–Ω–µ–π–º–∞'}`)
                .setDescription(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ <@${userId}>`)
                .addFields(
                    { name: 'Discord ID', value: user.discordId, inline: true },
                    { name: 'Discord Tag', value: user.discordTag || '–ù–µ —É–∫–∞–∑–∞–Ω', inline: true },
                    { name: '–ù–∏–∫–Ω–µ–π–º', value: user.nickname || '–ù–µ —É–∫–∞–∑–∞–Ω', inline: true },
                    { name: 'Telegram', value: user.telegram || '–ù–µ —É–∫–∞–∑–∞–Ω', inline: true },
                    { name: 'Email', value: user.email || '–ù–µ —É–∫–∞–∑–∞–Ω', inline: true },
                    { name: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', value: new Date(user.registeredAt).toLocaleString('ru-RU'), inline: true }
                )
                .setFooter({ text: 'Synergy Guild Bot' })
                .setTimestamp();
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (user.wallets && user.wallets.length > 0) {
                userEmbed.addFields({
                    name: '–ö–æ—à–µ–ª—å–∫–∏',
                    value: user.wallets.join('\n')
                });
            } else {
                userEmbed.addFields({
                    name: '–ö–æ—à–µ–ª—å–∫–∏',
                    value: '–ù–µ —É–∫–∞–∑–∞–Ω—ã'
                });
            }
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if (profileChanges && profileChanges.length > 0) {
                const recentChanges = profileChanges.slice(0, 5); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏–∑–º–µ–Ω–µ–Ω–∏–π
                
                const changesText = recentChanges.map(change => 
                    `${new Date(change.timestamp).toLocaleString('ru-RU')}: ${change.field} –∏–∑–º–µ–Ω–µ–Ω–æ —Å "${change.oldValue || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}" –Ω–∞ "${change.newValue || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"`
                ).join('\n');
                
                userEmbed.addFields({
                    name: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è',
                    value: changesText
                });
                
                if (profileChanges.length > 5) {
                    userEmbed.addFields({
                        name: '–ò –µ—â–µ...',
                        value: `–ï—â–µ ${profileChanges.length - 5} –∏–∑–º–µ–Ω–µ–Ω–∏–π`
                    });
                }
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`edit_user_${userId}`)
                        .setLabel('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId(`delete_user_${userId}`)
                        .setLabel('–£–¥–∞–ª–∏—Ç—å')
                        .setStyle(ButtonStyle.Danger)
                );
            
            await interaction.reply({
                embeds: [userEmbed],
                components: [row],
                ephemeral: true
            });
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async editUser(interaction) {
        try {
            const userId = interaction.options.getString('userid');
            
            // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const user = await User.findOne({ discordId: userId });
            
            if (!user) {
                return interaction.reply({
                    content: `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`,
                    ephemeral: true
                });
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            const modal = createUserEditModal(user);
            await interaction.showModal(modal);
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async deleteUser(interaction) {
        try {
            const userId = interaction.options.getString('userid');
            
            // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const user = await User.findOne({ discordId: userId });
            
            if (!user) {
                return interaction.reply({
                    content: `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`,
                    ephemeral: true
                });
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`confirm_delete_${userId}`)
                        .setLabel('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ')
                        .setStyle(ButtonStyle.Danger),
                    new ButtonBuilder()
                        .setCustomId('cancel_operation')
                        .setLabel('–û—Ç–º–µ–Ω–∞')
                        .setStyle(ButtonStyle.Secondary)
                );
            
            await interaction.reply({
                content: `‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.nickname || user.discordTag || userId}? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`,
                components: [row],
                ephemeral: true
            });
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    async handleButton(interaction) {
        try {
            const customId = interaction.customId;
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
            if (customId === 'cancel_operation') {
                return interaction.update({
                    content: '‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
                    components: [],
                    ephemeral: true
                });
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (customId.startsWith('edit_user_')) {
                const userId = customId.replace('edit_user_', '');
                
                // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const user = await User.findOne({ discordId: userId });
                
                if (!user) {
                    return interaction.reply({
                        content: `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`,
                        ephemeral: true
                    });
                }
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
                const modal = createUserEditModal(user);
                await interaction.showModal(modal);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            else if (customId.startsWith('delete_user_')) {
                const userId = customId.replace('delete_user_', '');
                
                // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const user = await User.findOne({ discordId: userId });
                
                if (!user) {
                    return interaction.reply({
                        content: `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`,
                        ephemeral: true
                    });
                }
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
                const row = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`confirm_delete_${userId}`)
                            .setLabel('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ')
                            .setStyle(ButtonStyle.Danger),
                        new ButtonBuilder()
                            .setCustomId('cancel_operation')
                            .setLabel('–û—Ç–º–µ–Ω–∞')
                            .setStyle(ButtonStyle.Secondary)
                    );
                
                await interaction.reply({
                    content: `‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.nickname || user.discordTag || userId}? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`,
                    components: [row],
                    ephemeral: true
                });
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            else if (customId.startsWith('confirm_delete_')) {
                const userId = customId.replace('confirm_delete_', '');
                
                // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const user = await User.findOne({ discordId: userId });
                
                if (!user) {
                    return interaction.update({
                        content: `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`,
                        components: [],
                        ephemeral: true
                    });
                }
                
                // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await User.deleteOne({ discordId: userId });
                
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.info(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${interaction.user.tag} (${interaction.user.id}) —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.nickname || user.discordTag || userId}`);
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                const adminLog = new AdminLog({
                    adminId: interaction.user.id,
                    action: 'delete_user',
                    targetId: userId,
                    details: `–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.nickname || user.discordTag || userId}`,
                    timestamp: new Date()
                });
                
                await adminLog.save();
                
                await interaction.update({
                    content: `‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.nickname || user.discordTag || userId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`,
                    components: [],
                    ephemeral: true
                });
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            else if (customId === 'prev_page' || customId === 'next_page') {
                // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                const embed = interaction.message.embeds[0];
                const footerText = embed.footer.text;
                const pageMatch = footerText.match(/–°—Ç—Ä–∞–Ω–∏—Ü–∞ (\d+) –∏–∑ (\d+)/);
                
                if (!pageMatch) {
                    return interaction.update({
                        content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.',
                        components: [],
                        ephemeral: true
                    });
                }
                
                const currentPage = parseInt(pageMatch[1]);
                const totalPages = parseInt(pageMatch[2]);
                
                // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                const newPage = customId === 'prev_page' ? currentPage - 1 : currentPage + 1;
                
                if (newPage < 1 || newPage > totalPages) {
                    return interaction.update({
                        content: '‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                        components: [],
                        ephemeral: true
                    });
                }
                
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                const users = await User.find({}).sort({ registeredAt: -1 });
                
                // –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                const usersEmbed = new EmbedBuilder()
                    .setColor(0x0099FF)
                    .setTitle('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                    .setDescription(`–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
                    .setFooter({ text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${newPage} –∏–∑ ${totalPages} | Synergy Guild Bot` })
                    .setTimestamp();
                
                // –†–∞–∑–±–∏–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–º–∞–∫—Å–∏–º—É–º 25 –ø–æ–ª–µ–π –≤ —ç–º–±–µ–¥–µ)
                const pageSize = 25;
                
                const startIndex = (newPage - 1) * pageSize;
                const endIndex = Math.min(startIndex + pageSize, users.length);
                
                for (let i = startIndex; i < endIndex; i++) {
                    const user = users[i];
                    usersEmbed.addFields({
                        name: `${user.nickname || '–ë–µ–∑ –Ω–∏–∫–Ω–µ–π–º–∞'} (ID: ${user.discordId})`,
                        value: `Telegram: ${user.telegram || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n–ö–æ—à–µ–ª—å–∫–∏: ${user.wallets.length > 0 ? user.wallets.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date(user.registeredAt).toLocaleString('ru-RU')}`
                    });
                }
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
                const row = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('prev_page')
                            .setLabel('‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è')
                            .setStyle(ButtonStyle.Secondary)
                            .setDisabled(newPage === 1),
                        new ButtonBuilder()
                            .setCustomId('next_page')
                            .setLabel('–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂Ô∏è')
                            .setStyle(ButtonStyle.Secondary)
                            .setDisabled(newPage === totalPages)
                    );
                
                await interaction.update({
                    embeds: [usersEmbed],
                    components: [row],
                    ephemeral: true
                });
            }
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    },

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    async handleModal(interaction) {
        try {
            const customId = interaction.customId;
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (customId.startsWith('edit_user_modal_')) {
                const userId = customId.replace('edit_user_modal_', '');
                
                // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const user = await User.findOne({ discordId: userId });
                
                if (!user) {
                    return interaction.reply({
                        content: `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`,
                        ephemeral: true
                    });
                }
                
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ø–æ–ª–µ–π
                const nickname = interaction.fields.getTextInputValue('user_nickname');
                const telegram = interaction.fields.getTextInputValue('user_telegram');
                const email = interaction.fields.getTextInputValue('user_email');
                const walletsStr = interaction.fields.getTextInputValue('user_wallets');
                
                // –†–∞–∑–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏
                const wallets = walletsStr.split('\n').filter(wallet => wallet.trim() !== '');
                
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                const oldNickname = user.nickname;
                const oldTelegram = user.telegram;
                const oldEmail = user.email;
                const oldWallets = [...user.wallets];
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user.nickname = nickname;
                user.telegram = telegram;
                user.email = email;
                user.wallets = wallets;
                user.updatedAt = new Date();
                
                await user.save();
                
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è
                if (oldNickname !== nickname) {
                    await profileLogger.logProfileChange(userId, 'nickname', oldNickname, nickname, interaction.user.id);
                }
                
                if (oldTelegram !== telegram) {
                    await profileLogger.logProfileChange(userId, 'telegram', oldTelegram, telegram, interaction.user.id);
                }
                
                if (oldEmail !== email) {
                    await profileLogger.logProfileChange(userId, 'email', oldEmail, email, interaction.user.id);
                }
                
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ—à–µ–ª—å–∫–æ–≤
                const addedWallets = wallets.filter(wallet => !oldWallets.includes(wallet));
                const removedWallets = oldWallets.filter(wallet => !wallets.includes(wallet));
                
                for (const wallet of addedWallets) {
                    await profileLogger.logProfileChange(userId, 'wallet_added', null, wallet, interaction.user.id);
                }
                
                for (const wallet of removedWallets) {
                    await profileLogger.logProfileChange(userId, 'wallet_removed', wallet, null, interaction.user.id);
                }
                
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.info(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${interaction.user.tag} (${interaction.user.id}) –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.nickname || user.discordTag || userId}`);
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                const adminLog = new AdminLog({
                    adminId: interaction.user.id,
                    action: 'edit_user',
                    targetId: userId,
                    details: `–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.nickname || user.discordTag || userId}`,
                    timestamp: new Date()
                });
                
                await adminLog.save();
                
                // –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                const userEmbed = new EmbedBuilder()
                    .setColor(0x00FF00)
                    .setTitle('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
                    .setDescription(`–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ <@${userId}>`)
                    .addFields(
                        { name: '–ù–∏–∫–Ω–µ–π–º', value: nickname || '–ù–µ —É–∫–∞–∑–∞–Ω', inline: true },
                        { name: 'Telegram', value: telegram || '–ù–µ —É–∫–∞–∑–∞–Ω', inline: true },
                        { name: 'Email', value: email || '–ù–µ —É–∫–∞–∑–∞–Ω', inline: true }
                    )
                    .setFooter({ text: 'Synergy Guild Bot' })
                    .setTimestamp();
                
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if (wallets.length > 0) {
                    userEmbed.addFields({
                        name: '–ö–æ—à–µ–ª—å–∫–∏',
                        value: wallets.join('\n')
                    });
                } else {
                    userEmbed.addFields({
                        name: '–ö–æ—à–µ–ª—å–∫–∏',
                        value: '–ù–µ —É–∫–∞–∑–∞–Ω—ã'
                    });
                }
                
                await interaction.reply({
                    content: '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!',
                    embeds: [userEmbed],
                    ephemeral: true
                });
            }
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: ${error.message}`);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true
            });
        }
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function createUserEditModal(user) {
    const modal = new ModalBuilder()
        .setCustomId(`edit_user_modal_${user.discordId}`)
        .setTitle('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const nicknameInput = new TextInputBuilder()
        .setCustomId('user_nickname')
        .setLabel('–ù–∏–∫–Ω–µ–π–º')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        .setValue(user.nickname || '')
        .setRequired(false);
    
    const telegramInput = new TextInputBuilder()
        .setCustomId('user_telegram')
        .setLabel('Telegram')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        .setValue(user.telegram || '')
        .setRequired(false);
    
    const emailInput = new TextInputBuilder()
        .setCustomId('user_email')
        .setLabel('Email')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        .setValue(user.email || '')
        .setRequired(false);
    
    const walletsInput = new TextInputBuilder()
        .setCustomId('user_wallets')
        .setLabel('–ö–æ—à–µ–ª—å–∫–∏ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)')
        .setStyle(TextInputStyle.Paragraph)
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –∫–æ—à–µ–ª—å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É')
        .setValue(user.wallets.join('\n'))
        .setRequired(false);
    
    const firstRow = new ActionRowBuilder().addComponents(nicknameInput);
    const secondRow = new ActionRowBuilder().addComponents(telegramInput);
    const thirdRow = new ActionRowBuilder().addComponents(emailInput);
    const fourthRow = new ActionRowBuilder().addComponents(walletsInput);
    
    modal.addComponents(firstRow, secondRow, thirdRow, fourthRow);
    
    return modal;
}
